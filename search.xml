<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的博客</title>
    <url>/2020-11-17-myblog.html</url>
    <content><![CDATA[<h2 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h2><ul>
<li><p><strong>一点介绍</strong><br>你好，这里是<strong>Hai的BLOG</strong>，本人目前是<strong>计算机科学与技术专业</strong>的一枚大三弱鸡，杭电在读，打算考研。</p>
<p>搭建博客的初衷其实只是脑子一热，在查阅资料的时候看到了杭电学长搭建的博客非常nice，想着自己也可以尝试记录一些自己遇到的问题和经验分享，当然最主要的是给自己提供一个平台用来记录所学内容（老懒狗了），当然也会有一些生活点滴的分享（程序员嘛，不能太死宅），如果不嫌麻烦，就关注一下啦~:laughing:</p>
<p>从个人角度来说，想要快速进步最好的办法是实践，另外可以多写写博客看看博客（CSDN老选手了），记录自己遇到的种种问题，可以让我有动力继续学下去（虽然我觉得我是挺喜欢这个专业的，虽然遇到了很多困难和发现他没有我想的那么简单），另外在遇到各种困难查阅资料的时候，我发现很多基础的东西很难找到相关的教程，很难学懂，所以成长到正常实力其实还是要有很长很长很痛苦的路要走的，而如果我把其中的过程记录下来，或许也可以为和我一样情况，没有基础又找不到合适资料的人提供方便。</p>
<p>希望有朝一日，自己能成长起来，能做到自己想做的事情，看到曾经弱鸡的自己，露出一副欣慰的笑容哈哈哈哈，也希望能够和大家一同进步！</p>
</li>
<li><p><strong>暂时打算</strong><br>目前可能会在ROS机器人和Linux操作系统方向进行主要的学习。</p>
</li>
<li><p><strong>PS：一些闲言碎语</strong><br>尽量不要三分钟热度…把自己所学的和所想的做好分享即可。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>B站计网课程学习总结（一）</title>
    <url>/2020-11-25-B%E7%AB%99%E8%AE%A1%E7%BD%91%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h2 id="B站计网课程学习总结（一）"><a href="#B站计网课程学习总结（一）" class="headerlink" title="B站计网课程学习总结（一）"></a>B站计网课程学习总结（一）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因HDU老师讲课学不进去（疯狂划水），在学习网站B站上找到了王道的计网视频，觉得讲的很不错，故根据此课程来总结学习大纲（快期末了QAQ）</p>
<a id="more"></a>

<h3 id="1-第一章综述"><a href="#1-第一章综述" class="headerlink" title="1.第一章综述"></a>1.第一章综述</h3>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS小车学习记录</title>
    <url>/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="ROS小车学习记录"><a href="#ROS小车学习记录" class="headerlink" title="ROS小车学习记录"></a>ROS小车学习记录</h2><h3 id="一、配置与连接"><a href="#一、配置与连接" class="headerlink" title="一、配置与连接"></a>一、配置与连接</h3><h4 id="1-配置VMware虚拟机及ROS-Kinetic-16-04-2"><a href="#1-配置VMware虚拟机及ROS-Kinetic-16-04-2" class="headerlink" title="1.配置VMware虚拟机及ROS Kinetic 16.04.2"></a>1.配置VMware虚拟机及ROS Kinetic 16.04.2</h4><p>a）安装好虚拟机及镜像，虚拟机初始设置为2核4G，设置为4核4G</p>
<a id="more"></a>

<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1606264498962.png" alt="1606264498962"></p>
<p>b）设置虚拟机网络模式为桥接模式，用Windows的无线网卡桥接</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1606264982920.png" alt="1606264982920"></p>
<p>c）确认Windows IP地址和虚拟机 IP地址（应在同一网段下）</p>
<p>以本机为例：</p>
<p>windows IP：192.108.1.103</p>
<p>ROS IP：192.108.1.108</p>
<h4 id="2-树莓派Ubuntu-Mate系统安装"><a href="#2-树莓派Ubuntu-Mate系统安装" class="headerlink" title="2.树莓派Ubuntu Mate系统安装"></a>2.树莓派Ubuntu Mate系统安装</h4><p>注：若树莓派上自带有SD卡即Ubuntu Mate已默认安装，若没有需安装。</p>
<p>a）需要的软件和功能：<br>      Panasonic_SDFormatter<br>      ubuntu-mate-16.04<br>      Win32DiskImager</p>
<p>b）操作过程：<br>    1、Panasonic_SDFormatter格式化TF卡；<br>    2、Win32DiskImager工具将ubuntu-mate-16.04的img文件烧写到TF卡中，然后插入到<a href="http://bbs.elecfans.com/try.html">开发板</a>中。<br>    3、开发板连接鼠标和键盘、HDMI连接显示器、然后通电。通电以后需要对系统进行一些设置才能正常使用系统，具体操作可以根据向导来完成。<br>    4、<strong>连接WIFI</strong>。必须保证PC，虚拟机和小车处于同一网络下，然后连接WIFI，查看连接配置，<strong>通过路由器配置界面得到小车端的IP</strong>。<br>    小车端IP：192.168.1.109<br>    5、<strong>通过PC端的虚拟机测试是否能PING通小车端。</strong></p>
<p>c）存在问题与简便解决</p>
<p>使用上述操作过程可能会存在一些问题，如无法进入系统（彩虹屏）及无法连接WIFI等，可以通过修改系统启动boot项及更换系统网络配置文件解决，但较为繁琐，之后学长提供了一种简便方法：直接恢复已配置好的镜像即可。</p>
<p>使用工具：usb image tool</p>
<p>将上述第二步改为恢复镜像即可。</p>
<h4 id="3-使用ROS-Ubuntu连接小车端"><a href="#3-使用ROS-Ubuntu连接小车端" class="headerlink" title="3.使用ROS Ubuntu连接小车端"></a>3.使用ROS Ubuntu连接小车端</h4><p>a）ping通小车端</p>
<p>b）路由器管理界面找到小车端IP地址</p>
<p>假设 虚拟机IP地址 192.168.1.108</p>
<p>小车端 IP地址 192.168.1.109    </p>
<p>c）虚拟机中 打开终端，输入指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit ~&#x2F;.bashrc </span><br></pre></td></tr></table></figure>

<p>找到文档最下面，输入（修改）两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ROS_MASTER_URI&#x3D;http:&#x2F;&#x2F;192.168.0.109:11311 #指定 XRobot 为 ROS Master</span><br><span class="line">export ROS_HOSTNAME&#x3D;192.168.0.108 #这里是虚拟机 IP</span><br></pre></td></tr></table></figure>

<p>保存退出。</p>
<p>d）虚拟机端：使用ssh指令连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh nodes@192.168.0.109</span><br></pre></td></tr></table></figure>

<p>连接到小车端，若连接成功，终端会变为nodes@xrobot：</p>
<p>e）小车端验证是否能ping通虚拟机端</p>
<p>f）ping通后，输入指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>最下面修改两行：（IP地址是小车端）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ROS_MASTER_URI&#x3D;http:&#x2F;&#x2F;192.168.0.109:11311</span><br><span class="line">export ROS_HOSTNAME&#x3D;192.168.0.109</span><br></pre></td></tr></table></figure>

<p>保存即可。</p>
<h4 id="4-配置ssh免密登录"><a href="#4-配置ssh免密登录" class="headerlink" title="4.配置ssh免密登录"></a>4.配置ssh免密登录</h4><p>a）首先,在本地计算机生成公钥和私钥。打开终端,执行命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>一直按回车键选择默认选项,会在~/.ssh 目录下生成 id_rsa 和 id_rsa.pub 两个文件。然后将 id_rsa.pub 文件复制到远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub username@ip_address:&#x2F;home&#x2F;username</span><br></pre></td></tr></table></figure>

<p>本机中，所用命令为scp ~/.ssh/id_rsa.pub <a href="mailto:&#110;&#x6f;&#100;&#x65;&#115;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#46;&#49;&#x30;&#57;">&#110;&#x6f;&#100;&#x65;&#115;&#x40;&#49;&#57;&#50;&#46;&#x31;&#x36;&#56;&#46;&#x31;&#46;&#49;&#x30;&#57;</a>:/home/nodes</p>
<p>b）将公钥文件 id_rsa.pub 拷贝到远程计算机后,SSH 登录到远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh username@ip_address</span><br></pre></td></tr></table></figure>

<p>其中 username 为远程计算机用户名,ip_address 为远程计算机的 IP 地址。</p>
<p>c）登录后,将id_rsa.pub 的文件内容追加写入到远程计算机的<br>~/.ssh/authorized_keys 文件中,并修改 authorized_keys 文件的权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>

<p>配置完成后,再登录远程计算机就无需输入密码。</p>
<p>d）接下来,即可配置 RoboWare Studio的远程调试参数进行远程调试<br>修改远程计算机/etc/profile<br>首先,登录远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh username@ip_address</span><br></pre></td></tr></table></figure>

<p>登录后,切换到 root 用户权限,将 ROS 环境变量信息写入到/etc/profile 文件中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">$ echo &quot;source &#x2F;opt&#x2F;ros&#x2F;indigo&#x2F;setup.bash&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>接下来在roboware上配置远程主控信息</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/3.png" alt="3"></p>
<p>步骤：IP，用户名（nodes），一直敲回车就可以了。</p>
<h3 id="二、调试及运行"><a href="#二、调试及运行" class="headerlink" title="二、调试及运行"></a>二、调试及运行</h3><h4 id="1-调试"><a href="#1-调试" class="headerlink" title="1.调试"></a>1.调试</h4>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>ROS小车</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU操作系统实验二</title>
    <url>/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C.html</url>
    <content><![CDATA[<h2 id="HDU操作系统实验二"><a href="#HDU操作系统实验二" class="headerlink" title="HDU操作系统实验二"></a>HDU操作系统实验二</h2><h3 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h3><p>1.设计一个模块，要求列出系统中所有内核线程的程序名、PID、进程状态、进程优先级、父进程的PID。</p>
<p>2.设计一个带参数的模块，其参数为某个进程的PID号，模块的功能是列出该进程的家族信息，包括父进程、兄弟进程和子进程的程序名、PID号及进程状态。</p>
<p>3.进一步分析相关内核函数。</p>
<a id="more"></a>

<h3 id="二、实验思路"><a href="#二、实验思路" class="headerlink" title="二、实验思路"></a>二、实验思路</h3><p>1.第一个的整体思路是遍历各线程，通过用户地址标识符将内核线程和用户线程分开，通过pid进程描述符输出即可。</p>
<p>2.第二个实验要求需要在加载模块时提供对应pid传入参数，父进程和子进程直接遍历即可，兄弟进程稍微复杂些，需返回父进程的子进程的链表头字段，然后逐个遍历（排除传入pid的进程）。</p>
<h3 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h3><p>1.实验一要求较为简单，在内核目录下创建module1文件夹，新建module1.c和Makefile</p>
<p>module1.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;\t\t名称\t进程号\t状态\t优先级\t&quot;</span>);</span><br><span class="line">    for_each_process(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;mm == <span class="literal">NULL</span>)&#123; <span class="comment">//内核线程的mm成员为空</span></span><br><span class="line">            printk(KERN_ALERT<span class="string">&quot;%16s\t%d\t%ld\t%d\n&quot;</span>,p-&gt;comm,p-&gt;pid, p-&gt;state,p-&gt;normal_prio);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清理函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数注册</span></span><br><span class="line">module_init(hello_init);  </span><br><span class="line">module_exit(hello_exit);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块许可申明</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=module1.o</span></span><br><span class="line">KDIR:=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line">PWD:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean </span><br></pre></td></tr></table></figure>

<p>输入以下命令编译并加载模块，结果如下图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make #编译</span><br><span class="line">sudo insmod module3.ko #加载模块</span><br><span class="line">lsmod #查看已加载的模块</span><br><span class="line">dmesg #输出日志信息</span><br></pre></td></tr></table></figure>

<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/1.png" alt="1"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/2.png" alt="2"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/3.png" alt="3"></p>
<p>2.实验二与实验一类似，同样编写module2.c和Makefile</p>
<p>module2.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pid_t</span> pid=<span class="number">1</span>;</span><br><span class="line">module_param(pid,<span class="keyword">int</span>,<span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">pp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">psibling</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前进程的 PID</span></span><br><span class="line">    p = pid_task(find_vpid(pid), PIDTYPE_PID);</span><br><span class="line">    printk(<span class="string">&quot;me: %d %s\n&quot;</span>, p-&gt;pid, p-&gt;comm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父进程</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;parent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;No Parent\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Parent: %d %s\n&quot;</span>, p-&gt;parent-&gt;pid, p-&gt;parent-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兄弟进程</span></span><br><span class="line">    list_for_each(pp, &amp;p-&gt;parent-&gt;children)</span><br><span class="line">    &#123;</span><br><span class="line">        psibling = list_entry(pp, struct task_struct, sibling);</span><br><span class="line">        printk(<span class="string">&quot;sibling %d %s \n&quot;</span>, psibling-&gt;pid, psibling-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子进程</span></span><br><span class="line">    list_for_each(pp, &amp;p-&gt;children)</span><br><span class="line">    &#123;</span><br><span class="line">        psibling = list_entry(pp, struct task_struct, sibling);</span><br><span class="line">        <span class="keyword">if</span> (psibling-&gt;pid == pid)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        printk(<span class="string">&quot;children %d %s \n&quot;</span>, psibling-&gt;pid, psibling-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=module2.o</span></span><br><span class="line">KDIR:=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line">PWD:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean </span><br></pre></td></tr></table></figure>

<p>同样地，输入以下命令编译并加载模块，结果如下图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make #编译</span><br><span class="line">pstree -p #选择进程pid</span><br><span class="line">sudo insmod module2.ko pid&#x3D;1418    #加载模块</span><br><span class="line">lsmod #查看已加载的模块</span><br><span class="line">dmesg #输出日志信息</span><br></pre></td></tr></table></figure>

<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/4.png" alt="4"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/5.png" alt="5"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/6.png" alt="6"></p>
<h3 id="四、实验反思与总结"><a href="#四、实验反思与总结" class="headerlink" title="四、实验反思与总结"></a>四、实验反思与总结</h3><h4 id="1-判断内核线程："><a href="#1-判断内核线程：" class="headerlink" title="1.判断内核线程："></a>1.判断内核线程：</h4><p>通过<strong>进程用户地址空间描述符</strong>来判断，内核线程的mm字段为NULL。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>     #进程用户地址空间描述符</span></span><br></pre></td></tr></table></figure>

<h4 id="2-进程状态："><a href="#2-进程状态：" class="headerlink" title="2.进程状态："></a>2.进程状态：</h4><ul>
<li><p>**R(TASK_RUNNING)**，可执行状态。</p>
<p>只有在该状态的进程才可能在CPU上运行，同一时刻可能有多个进程处于可执行状态。</p>
</li>
<li><p>**S(TASK_INTERRUPTIBLE)**，可中断的睡眠状态。</p>
<p>处于这个状态的进程因为等待某事件的发生（比如等待socket连接、等待信号量），而被挂起。当这些事件发生时，对应的等待队列中的一个或多个进程将被唤醒。一般情况下，进程列表中的绝大多数进程都处于TASK_INTERRUPTIBLE状态。</p>
</li>
<li><p>**D(TASK_UNINTERRUPTIBLE)**，不可中断的睡眠状态。</p>
<p>与TASK_INTERRUPTIBLE状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的是进程不响应异步信号，无法用kill命令关闭处于TASK_UNINTERRUPTIBLE状态的进程。</p>
</li>
<li><p>**T(TASK_STOPPED or TASK_TRACED)**，暂停状态或跟踪状态。</p>
<p>向进程发送一个SIGSTOP信号，它就会因响应该信号而进入TASK_STOPPED状态（除非该进程本身处于TASK_UNINTERRUPTIBLE状态而不响应信号）。当进程正在被跟踪时，它处于TASK_TRACED状态。</p>
</li>
<li><p>**Z(TASK_DEAD - EXIT_ZOMBIE)**，退出状态。</p>
<p>进程在退出的过程中，处于TASK_DEAD状态，如果它的父进程没有收到SIGCHLD信号，故未调用wait（如wait4、waitid）处理函数等待子进程结束，又没有显式忽略该信号，它就一直保持EXIT_ZOMBIE状态。只要父进程不退出，这个EXIT_ZOMBIE状态的子进程就一直存在。</p>
</li>
<li><p>**X(TASK_DEAD - EXIT_DEAD)**，退出状态，进程即将被销毁。</p>
<p>EXIT_DEAD状态是非常短暂的，几乎不可能通过ps命令捕捉到。</p>
</li>
</ul>
<h4 id="3-优先级调度"><a href="#3-优先级调度" class="headerlink" title="3.优先级调度"></a>3.优先级调度</h4><p>a）调度算法</p>
<p>​    linux内核目前实现了6中调度策略(即调度算法), 用于对不同类型的进程进行调度, 或者支持某些特殊的功能，其中SCHED_NORMAL和SCHED_BATCH调度普通的非实时进程, SCHED_FIFO和SCHED_RR和SCHED_DEADLINE则采用不同的调度策略调度实时进程, SCHED_IDLE则在系统空闲时调用idle进程.</p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>SCHED_NORMAL</td>
<td>（也叫SCHED_OTHER）用于普通进程，通过CFS调度器实现。SCHED_BATCH用于非交互的处理器消耗型进程。SCHED_IDLE是在系统负载很低时使用</td>
</tr>
<tr>
<td>SCHED_BATCH</td>
<td>SCHED_NORMAL普通进程策略的分化版本。采用分时策略，根据动态优先级(可用nice()API设置），分配CPU运算资源。注意：这类进程比上述两类实时进程优先级低，换言之，在有实时进程存在时，实时进程优先调度。但针对吞吐量优化, 除了不能抢占外与常规任务一样，允许任务运行更长时间，更好地使用高速缓存，适合于成批处理的工作</td>
</tr>
<tr>
<td>SCHED_IDLE</td>
<td>优先级最低，在系统空闲时才跑这类进程(如利用闲散计算机资源跑地外文明搜索，蛋白质结构分析等任务，是此调度策略的适用者）</td>
</tr>
<tr>
<td>SCHED_FIFO</td>
<td>先入先出调度算法（实时调度策略），相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务</td>
</tr>
<tr>
<td>SCHED_RR</td>
<td>轮流调度算法（实时调度策略），后者提供 Roound-Robin 语义，采用时间片，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优先级的任务可以抢占低优先级的任务。不同要求的实时任务可以根据需要用sched_setscheduler() API设置策略</td>
</tr>
<tr>
<td>SCHED_DEADLINE</td>
<td>新支持的实时进程调度策略，针对突发型计算，且对延迟和完成时间高度敏感的任务适用。基于Earliest Deadline First (EDF) 调度算法</td>
</tr>
</tbody></table>
<p>b）优先级定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NICE        19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_NICE        -20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NICE_WIDTH      (MAX_NICE - MIN_NICE + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_USER_RT_PRIO        100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_RT_PRIO             MAX_USER_RT_PRIO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PRIO                (MAX_RT_PRIO + NICE_WIDTH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_PRIO            (MAX_RT_PRIO + NICE_WIDTH / 2)</span></span><br></pre></td></tr></table></figure>

<p>​    程序的优先级范围为[0,139]，有效的<strong>实时优先级（RT priority）</strong>范围为[0,99]，SCHED_NORMAL和SCHED_BATCH这两个非实时任务的优先级为[100,139]。[100,139]这个区间的优先级又称为**静态优先级(static priority)**。之所以称为静态优先级是因为它不会随着时间而改变，内核不会修改它，只能通过系统调用nice去修改。静态优先级用进程描述符中的static_prio表示。优先级的值越低，表示具有更高的优先级，0的优先级最高。</p>
<table>
<thead>
<tr>
<th><strong>优先级范围</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0——99</td>
<td>实时进程（RT priority）优先级范围</td>
</tr>
<tr>
<td>100——139</td>
<td>非实时进程（非实时调度器SCHED_NORMAL和SCHED_BATCH）优先级范围</td>
</tr>
</tbody></table>
<p>​    MAX_USER_RT_PRIO的值（默认为100）让用户态的优先级范围区别于实时优先级的最大值（99）。这样设计的好处是<strong>任何内核态线程的优先级都大于用户态的任务线程</strong>。注意：最大实时优先级（MAX_RT_PRIO）不得小于用户态优先级（MAX_USER_RT_PRIO）。</p>
<p>​    用户的nice值[-20,19]对应于静态优先级的[100,139]，也就是说，nice值越小，优先级越低。用户的nice值与优先级的转化关系为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define NICE_TO_PRIO(nice)      ((nice) + DEFAULT_PRIO)</span><br><span class="line">#define PRIO_TO_NICE(prio)      ((prio) - DEFAULT_PRIO)</span><br></pre></td></tr></table></figure>

<p>可用下图来总结所对应的关系：</p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/7.png" alt="7"></p>
<h4 id="4-进程的task-struct结构及家族关系"><a href="#4-进程的task-struct结构及家族关系" class="headerlink" title="4.进程的task_struct结构及家族关系"></a>4.进程的task_struct结构及家族关系</h4><p>a）管理进程最重要的数据结构即为<strong>进程控制块（PCB）</strong>，为task_struct类型的结构体，主要的相关标识符字段有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pid_t pid #进程标识符PID</span><br><span class="line">pid_t tgid #线程组领头线程PID</span><br></pre></td></tr></table></figure>

<p>b）家族关系</p>
<p>除0号进程外，<strong>所有</strong>进程都是PID为1的init进程的后代。task_struct结构中描述家族关系主要字段有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">real_parent</span> #指向创建该进程的父进程</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span> #指向该进程的当前父进程（一般与上面相同）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>  #指向该进程子进程链表头部</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>   #指向兄弟进程链表中的下一个或前一个节点</span></span><br></pre></td></tr></table></figure>

<p>由sibling字段链接成为父进程的children链表。</p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/8.jpg" alt="8"></p>
<h4 id="5-链表遍历进程原理"><a href="#5-链表遍历进程原理" class="headerlink" title="5.链表遍历进程原理"></a>5.链表遍历进程原理</h4><p>1.list_for_each()和list_entry()</p>
<p>宏定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_for_each(pos, head) \</span></span><br><span class="line">	<span class="keyword">for</span> (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</span><br></pre></td></tr></table></figure>

<p>此定义只找到了list_head域的位置pos，通过list_entry()获得结构体起点地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define list_entry(ptr, type, member) \</span><br><span class="line">	container_of(ptr, type, member)</span><br></pre></td></tr></table></figure>

<p>其中ptr的值减去type结构体中member的偏移量，即可得出首地址。</p>
<p>2.for_each_process(p)和list_for_each_entry()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define list_for_each_entry(pos, head, member)				\</span><br><span class="line">	for (pos &#x3D; list_first_entry(head, typeof(*pos), member);	\</span><br><span class="line">	     &amp;pos-&gt;member !&#x3D; (head);					\</span><br><span class="line">	     pos &#x3D; list_next_entry(pos, member))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define for_each_process(p)</span><br><span class="line">	for(p&#x3D;&amp;init_task; p&#x3D;next_task(p)!&#x3D;&amp;init_task)</span><br></pre></td></tr></table></figure>

<p>可见，均为循环遍历算法。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>超星跨文化交际题库查漏补缺</title>
    <url>/2020-11-18-%E8%B7%A8%E6%96%87%E5%8C%96%E4%BA%A4%E9%99%85.html</url>
    <content><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p> 语境这一概念最早由波兰人类学家B.Malinowski在1923年提出来的。他将语境分为 情景 文化</p>
<p> 语言交际分为口语交际和书面语交际。</p>
<p> 下列属于高语境语言交际特点的是表情、空间、沉默</p>
<p> “西方乒乓球式”双向交际的表现是互动频繁 当面争执</p>
<a id="more"></a>

<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p> 在交际过程中不使用口头或文字形式进行信息传递的沟通方式即为非语言交际。 </p>
<p> 语言交际在人们面对面交际过程中仅占35%左右,其余65%主要是靠非语言交际手段来完成的。 </p>
<p> 在握手时，应由 女子; 主人; 年长者; 身份职位高者 先伸手。</p>
<p> 文字 不属于非语言交际中的文化符号</p>
<p> 韩国的公务聚会中应该首先给 职务最高者 敬酒</p>
<p> 美国人的合适的社交距离 4-12英尺</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p> 在美国，百合象征着die</p>
<p> 在美国猫头鹰代表着吉祥 <strong>X</strong></p>
<p> 表示“强壮”意思的英文表达是 as strong as a tiger</p>
<p> 英文Don’t lie there. 双关</p>
<p> 从传统上讲中国的春节是正月初一开始，一直延续到正月十五。 <strong>X</strong></p>
<p> 圣诞季节一般是从感恩节过后的“黑色星期五”开始，一直延续的第二年的元月15日  <strong>X</strong></p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>西方人在旅游的时候，喜欢用相机去看，去记录。 <strong>X</strong></p>
<p>习语的三个特征是语言整体性、结构凝固性和不可替代性。 </p>
<p>慷慨准则是指 多称赞别人</p>
<p>在美国考驾照，倒车的时候要注意看倒视镜。 <strong>X</strong></p>
<p>在英语里，“熊”意为聪明、伶俐。 </p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>鸠摩罗什把佛教从西方引入中国，将大量经书翻译成汉语，为佛教在中国的传播做出了巨大的贡献。他与（    ）和玄奘并称为中国佛教四大译经家。<br> A. 不空  B. 鉴真  C. 法显<br> D. 真谛  AD</p>
<p>下面哪些属于中国八大建筑流派？  ABDE<br> A. 江南民居  B. 川西民居  C. 蒙古包  D. 北京四合院 E. 书院建筑</p>
<p>中国古典建筑风格可以用以下哪12个字概括？  BCD<br> A. 金碧辉煌  B. 雕梁画柱<br> C. 飞檐斗拱  D. 亭台楼阁 </p>
<p>下面哪些建筑属于罗马式建筑？<br> A. 德国科隆大教堂<br> B. 伦敦圣保罗大教堂<br> C. 梵蒂冈圣保罗大教堂<br> D. 意大利米兰大教堂<br> E. 巴黎圣母院大教堂<br> 正确答案B,C </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>网课</tag>
      </tags>
  </entry>
</search>
