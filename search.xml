<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的博客</title>
    <url>/2020-11-17-myblog.html</url>
    <content><![CDATA[<h2 id="写在开始"><a href="#写在开始" class="headerlink" title="写在开始"></a>写在开始</h2><ul>
<li><p><strong>一点介绍</strong><br>你好，这里是<strong>Hai的BLOG</strong>，本人目前是<strong>计算机科学与技术专业</strong>的一枚大三弱鸡，杭电在读，打算考研。</p>
<p>搭建博客的初衷其实只是脑子一热，在查阅资料的时候看到了杭电学长搭建的博客非常nice，想着自己也可以尝试记录一些自己遇到的问题和经验分享，当然最主要的是给自己提供一个平台用来记录所学内容（老懒狗了），当然也会有一些生活点滴的分享（程序员嘛，不能太死宅），如果不嫌麻烦，就关注一下啦~:laughing:</p>
<p>从个人角度来说，想要快速进步最好的办法是实践，另外可以多写写博客看看博客（CSDN老选手了），记录自己遇到的种种问题，可以让我有动力继续学下去（虽然我觉得我是挺喜欢这个专业的，虽然遇到了很多困难和发现他没有我想的那么简单），另外在遇到各种困难查阅资料的时候，我发现很多基础的东西很难找到相关的教程，很难学懂，所以成长到正常实力其实还是要有很长很长很痛苦的路要走的，而如果我把其中的过程记录下来，或许也可以为和我一样情况，没有基础又找不到合适资料的人提供方便。</p>
<p>希望有朝一日，自己能成长起来，能做到自己想做的事情，看到曾经弱鸡的自己，露出一副欣慰的笑容哈哈哈哈，也希望能够和大家一同进步！</p>
</li>
<li><p><strong>暂时打算</strong><br>目前可能会在ROS机器人和Linux操作系统方向进行主要的学习。</p>
</li>
<li><p><strong>PS：一些闲言碎语</strong><br>尽量不要三分钟热度…把自己所学的和所想的做好分享即可。</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>HDU操作系统实验三</title>
    <url>/2020-12-15-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%89.html</url>
    <content><![CDATA[<h2 id="HDU操作系统实验三"><a href="#HDU操作系统实验三" class="headerlink" title="HDU操作系统实验三"></a>HDU操作系统实验三</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="# 实验要求"></a># 实验要求</h3><blockquote>
<ol>
<li>实验名：Linux进程管理</li>
</ol>
<a id="more"></a>

<ol start="2">
<li><p>实验要求：</p>
<p>1）实现一个模拟的shell</p>
</li>
</ol>
<p>​        编写三个不同的程序cmd1.c、cmd2.c及cmd3.c，每个程序的功能自定，分别编译成可执行文件cmd1、cmd2、cmd3.然后再编写一个程序，模拟shell程序的功能：能根据用户输入的字符串（表示相应的命令名），为相应的命令创建子进程并让他去执行相应的程序，而父进程则等待子进程结束，然后再接收下一条命令。如果接收到的命令为exit，则父进程结束，退出模拟shell；如果接收到的命令是无效命令，则显示“Command not found”，继续等待输入下一条命令。</p>
<p>​        2）实现一个管道通信程序</p>
<p>​        由父进程创建一个管道，然后再创建三个子进程，并由这三个子进程利用管道与父进程之间进行通信：子进程发送信息，父进程等三个子进程全部发完消息后再接收信息。通信的具体内容可根据自己的需要随意设计，要求能试验阻塞型读写过程中的各种情况，测试管道的默认大小，并且要求利用 Posix 信号量机制实现进程间对管道的互斥访问。运行程序，观察各种情况下，进程实际读写的字节数以及进程阻塞唤醒的情况。 </p>
<p>​        3）利用Linux消息队列通信机制实现两个线程间的通信</p>
<p>​        编写程序创建三个线程：sender1线程、sender2线程和receiver线程，三个线程的功能描述如下：</p>
<p>​        ①sender1线程：运行函数sender1()，它创建一个消息队列，然后等待用户通过终端输入一串字符，并将这串字符通过消息队列发给receiver线程;可循环发送多个消息，直到用户输入“exit”为止，表示它不再发送消息，最后向receiver线程发送消息“end1”，并且等待receiver的应答（老师告知可以省略这步，所以代码没有体现，sender2同），等到应答消息后，将接收到的应答信息显示在终端屏幕上，结束线程的运行。</p>
<p>​        ②sender2线程：运行函数sender2()，共享sender1创建的消息队列，等待用户通过终端输入一串字符，并将这串字符通过消息队列发送给receiver线程；可循环发送多个消息，直到用户输入“exit”为止，表示它不再发送消息，最后向receiver线程发送消息“end2”，并且等待receiver的应答，等到应答消息后，将接收到的应答信息显示在终端屏幕上，结束线程的运行。</p>
<pre><code>    ③receiver线程：运行函数receive()，它通过消息队列接收来自sender1和sender2两个线程的消息，将消息显示在终端屏幕上，当收到内容为“end1”的消息时，就向sender1发送一个应答消息“over1”；当收到内容为“end2”的消息时，就向sender2发送一个应答消息“over2”；消息接受完成后删除消息队列，结束线程的运行。选择合适的信号量机制实现三个线程之间的同步和互斥</code></pre>
<p>​        4）利用Linux共享内存通信机制实现两个进程间的通信</p>
<p>​        编写程序sender，它创建一个共享内存，然后等待用户通过终端输入一串字符，并将这串字符通过共享内存发送给receiver；最后，它等待receiver的应答，收到应答消息后，将接收到的应答信息显示在终端屏幕上，删除共享内存，结束程序的运行。编写receiver程序，它通过共享内存接收来自sender的消息，将消息显示在终端屏幕上，然后再通过该共享内存向sender发送一个应答消息“over”，结束程序的运行。选择合适的信号量机制实现两个进程对共享内存的互斥及同步使用。</p>
</blockquote>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="# 实验思路"></a># 实验思路</h3><ol>
<li><p><strong>实验一</strong></p>
<ul>
<li>pid = fork()会返回多个值，只需在fork()后使用多个判断语句即可。<br>pid&lt;0表示错误，打印error之后退出<br>pid=0表示子进程运行，使用execl替换进程，替换为我们想要的进程，如cmd.o。<br>pid&gt;0表示父进程运行，使用wait(NULL)函数等待所有子进程的退出。 </li>
</ul>
</li>
<li><p><strong>实验二</strong></p>
<ul>
<li>使用7个信号量：<br>Mutex = sem_open(“Mutex”, O_CREAT, 0666, 1);<br>send1 = sem_open(“send1”, O_CREAT, 0666, 1);<br>send2 = sem_open(“send2”, O_CREAT, 0666, 1);<br>send3 = sem_open(“send3”, O_CREAT, 0666, 1);<br>receive1 = sem_open(“receive1”, O_CREAT, 0666, 0);<br>receive2 = sem_open(“receive2”, O_CREAT, 0666, 0);<br>receive3 = sem_open(“receive3”, O_CREAT, 0666, 0);</li>
<li>建立无名管道：<br>int fd[2];<br>int ret = pipe(fd);//无名管道</li>
<li>先fork三个子进程，编写各自的操作</li>
<li>每个子进程等待各自的send信号量，再等待Mutex信号量，进行，完成后释放各自的receiver：<br>P(send)<br>P(Mutex)<br>——发送内容到管道<br>V(receiver)<br>V(Mutex)</li>
<li>父进程等待三个receiver信号量，接收管道内容后，释放三个send信号量：<br>P(receiver1)<br>P(receiver2)<br>P(receiver3)<br>P(Mutex)<br>——发送内容到管道<br>V(receiver1)<br>V(receiver2)<br>V(receiver3)<br>V(Mutex)</li>
</ul>
</li>
<li><p><strong>实验三</strong></p>
<ul>
<li><p>四个信号量：<br>sem_send = sem_open(“send”, O_CREAT, 0666, 1);<br>sem_receive = sem_open(“receive”, O_CREAT, 0666, 0);<br>sem_over1 = sem_open(“over1”, O_CREAT, 0666, 0);<br>sem_over2 = sem_open(“over2”, O_CREAT, 0666, 0);</p>
</li>
<li><p>整体思路：</p>
<p>发送：（以sender1为例）<br>While(1)<br>{<br>P(send)<br>发送消息给接收消息队列<br>if(发送的是”exit”)<br>Break;<br>P(receive)<br>}<br>P(over1)<br>发送退出消息<br>V(send)<br>退出<br>接收：<br>Int flag1 = 0;<br>Int flag2 = 0;<br>While(1)<br>{<br>P(receive)<br>发送消息给接收消息队列<br>if(接收到的是1发来的”exit”)<br>Flag1 = 1<br>V(over1)<br>if(接收到的是2发来的”exit”)<br>Falg2 = 1<br>V(over2)<br>P(send)</p>
<p>If(flag1 &amp;&amp; flag2)<br>Break;<br>}<br>退出</p>
</li>
</ul>
</li>
<li><p><strong>实验四</strong></p>
<ul>
<li><p>共享内存中放的是字符串<br>支持不断地发送，不断地接收（加接收延时即可）<br>在发送消息中，第一位表示是哪个发送者发送的，以此区分发送者。</p>
</li>
<li><p>sem_send = sem_open(“send”, O_CREAT, 0666, 2);<br>sem_receive = sem_open(“receive”, O_CREAT, 0666, 0);<br>sem_over1 = sem_open(“over1”, O_CREAT, 0666, 0);<br>sem_over2 = sem_open(“over2”, O_CREAT, 0666, 0);</p>
</li>
<li><p>整体思路：</p>
<p>发送：<br>While(1)<br>P(send)<br>发送信息<br>V(receive)<br>P(over1)<br>显示传回信息<br>V(send)</p>
<p>接收：<br>Int flag1 = 0;<br>Int flag2 = 0;<br>While(1)<br>P(receive)<br>If(是sender1发送的)<br>If(发送的是“exit”)<br>Flag1 = 1<br>V(over1)<br>If(是sender2发送的)<br>If(发送的是“exit”)<br>Falg2 = 1<br>V(over2)</p>
</li>
</ul>
</li>
</ol>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="#实验原理"></a>#实验原理</h3><ol>
<li><p>Posix信号量</p>
<p>POSIX信号量有两种：<strong>有名信号量</strong>和<strong>无名信号量</strong>，无名信号量也被称作基于内存的信号量。有名信号量通过IPC名字进行进程间的同步，而无名信号量如果不是放在进程间的共享内存区中，是不能用来进行进程间同步的，只能用来进行线程同步。</p>
<p>具体函数接口如图： </p>
<p><img src="/2020-12-15-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%89/Hexo\source_posts\HDU操作系统实验三\1.png"></p>
<ul>
<li><p>有名信号量的创建与删除</p>
<p>查看源码定义：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">sem_t</span> *<span class="title">sem_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> oflag)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">sem_t</span> *<span class="title">sem_open</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">int</span> oflag,</span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">mode_t</span> mode, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">                              <span class="comment">//成功返回信号量指针，失败返回SEM_FAILED</span></span><br></pre></td></tr></table></figure>

<p>sem_open用于创建或打开一个信号量，信号量是通过name参数即信号量的名字来进行标识。</p>
<p>oflag参数可以为：0，O_CREAT，O_EXCL。如果为0表示打开一个已存在的信号量，如果为O_CREAT，表示如果信号量不存在就创建一个信号量，如果存在则打开被返回。此时mode和value需要指定。如果为O_CREAT | O_EXCL，表示如果信号量已存在会返回错误。</p>
<p>mode参数用于创建信号量时，表示信号量的权限位，和open函数一样包括：S_IRUSR，S_IWUSR，S_IRGRP，S_IWGRP，S_IROTH，S_IWOTH。</p>
<p>value表示创建信号量时，信号量的初始值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_close</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_unlink</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span></span>;</span><br><span class="line">                              <span class="comment">//成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>

<p>sem_close用于关闭打开的信号量。当一个进程终止时，内核对其上仍然打开的所有有名信号量自动执行这个操作。调用sem_close关闭信号量并没有把它从系统中删除它，POSIX有名信号量是随内核持续的。即使当前没有进程打开某个信号量它的值依然保持。直到内核重新自举或调用sem_unlink()删除该信号量。</p>
<p>sem_unlink用于将有名信号量立刻从系统中删除，但信号量的销毁是在所有进程都关闭信号量的时候。</p>
</li>
<li><p>信号量的P操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span> <span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_trywait</span> <span class="params">(<span class="keyword">sem_t</span> * sem)</span></span>;</span><br><span class="line">                              <span class="comment">//成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>

<p>sem_wait() 用于获取信号量，首先会测试指定信号量的值，如果大于 0 ，就会将它<strong>减 1</strong> 并立即返回，如果等于 0 ，那么调用线程会进入睡眠，指定信号量的值大于 0.<br>sem_trywait和sem_wait的差别是，当信号量的值等于0的，调用线程不会阻塞，直接返回，并标识EAGAIN错误。</p>
</li>
<li><p>信号量的V操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line">                            <span class="comment">//成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>

<p>当一个线程使用完某个信号量后，调用sem_post，使该信号量的值<strong>加1</strong>，如果有等待的线程，那么会唤醒等待的一个线程。</p>
</li>
<li><p>获取当前信号量的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_getvalue</span><span class="params">(<span class="keyword">sem_t</span> *sem,  <span class="keyword">int</span> *sval)</span></span>;</span><br><span class="line">                            <span class="comment">//成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>

<p>该函数返回当前信号量的值，通过sval输出参数返回，如果当前信号量已经上锁（即同步对象不可用），那么返回值为0，或为负数，其绝对值就是等待该信号量解锁的线程数。</p>
</li>
<li><p>无名信号量的创建和销毁</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_init</span><span class="params">(<span class="keyword">sem_t</span> *sem, <span class="keyword">int</span> pshared, <span class="keyword">unsigned</span> <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">                            <span class="comment">//若出错则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_destroy</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br><span class="line">                            <span class="comment">//成功返回0，失败返回-1</span></span><br></pre></td></tr></table></figure>

<p>sem_init()用于无名信号量的初始化。无名信号量在初始化前一定要在内存中分配一个sem_t信号量类型的对象，这就是无名信号量又称为基于内存的信号量的原因。</p>
<p>sem_init()第一个参数是指向一个已经分配的sem_t变量。第二个参数pshared表示该信号量是否由于进程间通步，当pshared = 0，那么表示该信号量只能用于进程内部的线程间的同步。当pshared != 0，表示该信号量存放在共享内存区中，使使用它的进程能够访问该共享内存区进行进程同步。第三个参数value表示信号量的初始值。</p>
<p> 使用完一个无名信号量后，调用sem_destroy摧毁它。 </p>
</li>
<li><p>有名和无名信号量的持续性</p>
<p><strong>有名信号量是随内核持续的</strong>。当有名信号量创建后，即使当前没有进程打开某个信号量它的值依然保持。直到内核重新自举或调用sem_unlink()删除该信号量。</p>
<p>无名信号量的持续性要根据信号量在内存中的位置：</p>
<ul>
<li>如果无名信号量是在*<strong>*单个进程内部的数据空间**</strong>中，即信号量只能在进程内部的各个线程间共享，那么信号量是<strong>随进程的持续性</strong>，当进程终止时它也就消失了。</li>
<li>如果无名信号量位于*<strong>*不同进程的共享内存区**</strong>，因此只要该共享内存区仍然存在，该信号量就会一直存在。所以此时无名信号量是<strong>随内核的持续性</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><p>IPC信号量</p>
<p>1）IPC信号量数据结构</p>
</li>
</ol>
<ul>
<li>sem结构</li>
</ul>
<p>   2）IPC信号量相关系统调用</p>
<ul>
<li><p><strong>创建/返回信号量</strong></p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> nsems, <span class="keyword">int</span> flag)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>成功</strong>：返回信号量集的IPC标识符。 </p>
<p>   <strong>失败</strong>：返回-1；</p>
<p>   参数说明：<br>   第一个参数:在本地系统中表示要创建或访问信号量的ID值，IPC_PRIVATE表示创建一个新的信号量；<br>   第二个参数 nsems：表示该集合中的信号量。大于等于0；表示由可用资源数。<br>   如果是创建新的信号量(一般是在服务器中进行)，则必须指定nsems。如果引用一个现存的集合（一个客户进程），则将nsems指定为0；<br>   第三个参数flag：指定选项和权限位的标志。IPC_CREAT和IPC_EXEL；</p>
<ul>
<li><p><strong>操作信号量</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf semoparray[], <span class="keyword">size_t</span> nops)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>成功</strong>：返回0；</p>
<p><strong>失败</strong>：返回-1；</p>
<p>参数说明：<br>semid:通过semget（）函数返回的一个信号量集标识符ID;<br>nops：标明参数semoparray所指向数组中的元素个数。<br>semoparray是一个结构数组指针。结构体struct sembuf用来说明要执行的操作。<br>struct sembuf{</p>
<pre><code> unsigned short sem_num;           //对应信号量集中的某个资源
 short sem_op;                     //指明所要执行的操作
 short sem_flg;                    //函数semop的行为
 &#125;</code></pre>
<p>sem_op的值是一个整数:</p>
<p>（1）sem_op  &gt;  0 :释放相应的资源数，如果有两个信号量，释放信号量1，则其semval+1，对信号量这个无名结构体的操作，通过semctl函数来实现。<br>（2）sem_op == 0:进程阻塞直到信号量的相应值为0，档信号量已经为0，函数立即返回。<br>（3）sem_op  &lt;  0:请求sem_op的绝对值的资源数。<br>sem_flag:<br>该参数可以设置成为IPC_NOWAIT和SEM_UNDO两种状态。</p>
<pre><code>IPC_NOWAIT:对信号的操作不能满足时，semop()不会阻塞，并立即返回，同事设定错误信息。
IPC_UNDO:程序结束时释放信号量，这样做可以避免程序在异常情况下结束时未将锁定的资源解锁，造成该资源永远锁定。 </code></pre>
</li>
<li><p><strong>控制信号量集</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int semctl(int sem_id, int semnum, int cmd, union semun arg);</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<pre><code>sem_id:信号量集标识符；
semnum:指定信号量集中某一个信号灯成员，其值在（0~nsems-1）；
cmd：定义了函数要进行的操作；</code></pre>
<p>cmd的常用值：<br>IPC_STAT:对此集合区semid_ds结构，并不存放在arg.buf之中。<br>GETVAL:返回结构体数组中以semnum为下标的元素的成员semval值。<br>SETVAL：使用arg.val对该信号量的semnum.sempid赋值</p>
<p>第四个参数是可选的，但是其很重要不能忽略，它的类型是semun，它是多个特定命令的联合(union):<br>union semun {</p>
<pre><code>int  val;    //val的值为cmd命令的SETVAL所用；
struct semid_ds   *duf;   
unsigned short    *array;</code></pre>
<p>}</p>
</li>
</ul>
</li>
</ul>
<ol start="3">
<li></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>生活随笔</title>
    <url>/2020-11-29-%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94.html</url>
    <content><![CDATA[<h4 id="1-《怀旧》"><a href="#1-《怀旧》" class="headerlink" title="1 《怀旧》"></a>1 《怀旧》</h4><p>我好像是个怀旧的人。</p>
<a id="more"></a>

<p>高中三年想着初中，大学三年想着高中，听歌还全是老歌，以至于现在天天循环从初中开始听了七年的歌（写随笔的时候听的是许嵩的《庐州月》)…说实话，我一点都没有变，只是在努力地适应着生活。</p>
<p>而我身边的人不这样。</p>
<p>今天晚上，一个高中的好朋友给我分享了一个链接，标题是：国家奖学金获得者XXX（她本人），一路前行，嘴上说着祝贺，心里略微有了一点苦涩。是啊，相比起其他人的大学，我真的太普通不过了。说着是在计算机专业学习，但是内心对什么都很排斥，想着在自己的小天地，碌碌无为，好吃懒做，在这个高手如云的专业，甚至都排不上号，看着别人一步步变得更好，自己剩下的只有无力。</p>
<p>之前看到老番茄的毕业视频，其中有一幕是登台演讲的时候，灯光都聚集在他的身上，弹幕都在说他在发光，也许我也曾渴望自己来到大学是这个模样，但三年过去了，一点没变。</p>
<p>一时不知道说什么下去了，祝大家在自己的世界里，都熠熠发光吧。</p>
<h4 id="2-《熬夜冠军》"><a href="#2-《熬夜冠军》" class="headerlink" title="2 《熬夜冠军》"></a>2 《熬夜冠军》</h4><p>凌晨两点半，某男生宿舍。</p>
<p>睡不着的我翻来覆去，刷着视频，一会儿上个厕所，一会坐起来喝水…熬夜人常态。</p>
<p>本来以为是个平常的一天，但今天不一样。</p>
<p>两点半，坐起身，准备上厕所时候，临铺突然支起身子来，好像在看我。我试探性的叫了一声“凡凡”，因为这种事不是一次两次了，而且刚刚还说着梦话。没想到，得到了应答：睡不着。</p>
<p>我一阵偷笑，拍了拍他，说早点睡，下了床。唯一的下铺今天也灯火通明（没睡）。</p>
<p>我也拍了拍他，说睡吧。</p>
<p>上完厕所爬上床，感觉到了一丝欣慰。因为，我不再是孤军奋战了（doge）</p>
<p>于是今天四点半才睡着…</p>
<p>下次一定不熬夜了！！！！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU操作系统实验一</title>
    <url>/2020-11-27-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%80.html</url>
    <content><![CDATA[<h2 id="HDU操作系统实验一"><a href="#HDU操作系统实验一" class="headerlink" title="HDU操作系统实验一"></a>HDU操作系统实验一</h2><h3 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h3><ul>
<li><p>添加一个系统调用，实现对指定进程的nice值的修改或读取功能，并返回进程最新的nice值及优先级。建议调用原型是int mysetnice(pid_t pid, int flag, int nicevalue, void_user* prio, void_user* nice)参数含义：</p>
<a id="more"></a>
</li>
<li><p>pid：进程ID<br>flag：若为0，则表示读取nice的值；若为1，则表示修改nice的值。<br>nicevalue：为指定的进程设置新的nice。<br>prio，nice：指向进程的优先级和nice值。<br>返回值：系统调用成功时返回0；失败时返回错误码EFAULT。</p>
</li>
<li><p>写一个简单的应用程序测试（1）中添加的系统调用。</p>
</li>
<li><p>若系统调用了Linux的内核函数，要求深入阅读相关的源码。</p>
</li>
</ul>
<h3 id="二、实验思路"><a href="#二、实验思路" class="headerlink" title="二、实验思路"></a>二、实验思路</h3><ol>
<li>个人理解为通过修改系统调用表实现系统调用（即调用系统自带函数），例如c语言的头文件。</li>
<li>通过将调用例程写入内核并编译内核，完成所述要求。</li>
</ol>
<h3 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h3><ol>
<li><p>前期准备工作</p>
<p>虚拟机上需要安装ubuntu，本人安装了Ubuntu 16.04.2，配置要求有两点：</p>
<ul>
<li><strong>内存分配40G以上</strong></li>
<li><strong>CPU分配4核（双核双线程）</strong></li>
</ul>
<p>安装好后，还需要去官网下载linux内核源码，本人下载的版本是linux-4.16.3.tar.xz，传到虚拟机中，解压出来即可。</p>
<p><img src="/2020-11-27-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%80/1.png" alt="1"></p>
<p><img src="/2020-11-27-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%80/2.png" alt="2"></p>
</li>
<li><p>分配系统调用号，修改系统调用表</p>
<ul>
<li><p>查看系统调用表(linux-4.16.3/arch/x86/entry/syscalls/syscall_64.tbl)</p>
<p><img src="/2020-11-27-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%80/3.png" alt="3"></p>
</li>
<li><p>在这里我们需要选择一个未使用过的系统调用号进行分配，当前系统使用到332号，所以我们选择新添加的系统调用号为333号。</p>
</li>
</ul>
</li>
<li><p>声明系统调用服务例程</p>
<ul>
<li><p>Linux系统调用服务例程的原型申明在文件 (./include/linux/syscalls.h) 中，我们可以添加如图所示的内容</p>
<p><img src="/2020-11-27-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%B8%80/4.png" alt="4"></p>
</li>
<li><p>每个系统调用都对应一个内核服务例程来实现该系统调用的具体功能，其命名格式都是以“sys_”开头。其中“asmlinkage”是一个必须的限定词，用于通知编译器仅从堆栈中提取该函数的参数，而不是从寄存器中，因为在执行服务例程之前系统已经将通过寄存器传递过来的参数值压入内核堆栈了。</p>
</li>
</ul>
</li>
<li><p>实现系统调用服务</p>
<ul>
<li><p>下面为新调用的 mysetnice 编写服务例程 sys_dhsyscall， 通常添加在 sys.c 文件中，其路径为 (./kernel/sys.c )。 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SYSCALL_DEFINE5(dhsyscall,<span class="keyword">pid_t</span>,pid,<span class="keyword">int</span>,flag,<span class="keyword">int</span>,nicevalue,<span class="keyword">void</span> __user*,prio,<span class="keyword">void</span> __user*,nice)&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">pid</span> * <span class="title">kpid</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> * <span class="title">pcb</span>;</span></span><br><span class="line">	kpid = find_get_pid(pid);<span class="comment">/* 返回pid */</span></span><br><span class="line">	pcb = pid_task(kpid, PIDTYPE_PID);<span class="comment">/* 返回task_struct */</span></span><br><span class="line">	<span class="keyword">int</span> now_nice,now_prio;    </span><br><span class="line">	<span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		set_user_nice(pcb, nicevalue);<span class="comment">/* 修改进程nice值 */</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(flag != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> EFAULT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	now_prio = task_prio(pcb);<span class="comment">/*返回进程当前prio值*/</span></span><br><span class="line">	now_nice = task_nice(pcb);<span class="comment">/*重新取得进程nice值*/</span></span><br><span class="line"></span><br><span class="line">	copy_to_user(nice,&amp; now_nice,<span class="keyword">sizeof</span>(now_nice));<span class="comment">/*将nice值拷贝到用户空间*/</span></span><br><span class="line">	copy_to_user(prio,&amp; now_prio,<span class="keyword">sizeof</span>(now_prio));<span class="comment">/*将prio值拷贝到用户空间*/</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这是一个简单的实现读取进程 nice 值和修改进行 nice 值的服务。当参数 flag 为 0 的时候读取 nice 值，并将数据从内核空间拷贝到用户空间。当 flag 为 1 的时候修改 nice 值为 nicevalue 的值。 </p>
</li>
<li><p>在新版本的内核中，引入了宏“SYSCALL_DEFINEN(sname)”对服务例程原型进行了封装，其中的“N”是该系统调用所需要参数的个数， 在这里我们使用了 5 个参数所以是 DEFINE5。 </p>
</li>
</ul>
</li>
<li><p>编译内核</p>
<ul>
<li><p>清除残留的.config 和.o 文件 </p>
<p>编译出错需要重新编译或不是第一次编译，都需要清除残留的.config 和.o 文件，方法是进入Linux内核所在的子目录， 执行以下命令： </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># make mrproper</span></span><br></pre></td></tr></table></figure>

<p>这里可能会提醒安装 ncurses 包，在 ubuntu 中 ncurses 库的名字是 libncurses5-dev，安装命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install libncurses5-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置内核</p>
<p>执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># make menuconfig</span><br></pre></td></tr></table></figure>

<p>运行该命令过程中，可能会报错提示缺少一个套件 ncurses devel，那么你需要手动对其进行安装，安装方法同上安装 ncurses 包的过程。</p>
<p>在执行 make menuconfig 命令的时候会出现一个配置对话框，我们一般采用默认值：选择<save>保存配置信息，然后选择<exit>退出对话框。</exit></save></p>
</li>
<li><p>编译内核，生成启动映像文件</p>
<p>内核配置完后，编译内核，生成启动映像文件 bzlmage ，位于 (./arch/x86_64/boot/bzlmage) 中，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># make </span><br></pre></td></tr></table></figure>

<p> 这里也许会提示没有安装 openssl，安装的方法如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># apt-get install libssl-dev</span><br></pre></td></tr></table></figure>

<p> 内核编译时间可能较长，视硬件配置而定，一般情况为2小时左右</p>
</li>
<li><p>编译模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># make modules</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装模块/内核 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># make modules_install</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 grub 引导程序 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># update-grub2</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># reboot</span><br></pre></td></tr></table></figure>

<p> 重启系统后，可以通过终端来查看新内核的版本。输入如下指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p> 观察显示的内核版本是否与编译的内核版本一致。 </p>
</li>
</ul>
</li>
<li><p>编写用户态测试程序</p>
<p>测试程序如下：</p>
<p>test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _SYSCALL_dhsyscall_ 333</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EFALUT 14     <span class="comment">/*这里linux中错误码EFAULT的值为14*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pid, flag, nicevalue;</span><br><span class="line">    <span class="keyword">int</span> prev_prio, prev_nice, cur_prio, cur_nice;</span><br><span class="line">    <span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入PID flag nicevalue: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;pid, &amp;flag, &amp;nicevalue);</span><br><span class="line"></span><br><span class="line">    result = syscall(_SYSCALL_dhsyscall_, pid, <span class="number">0</span>, nicevalue, &amp;prev_prio,</span><br><span class="line">                     &amp;prev_nice);</span><br><span class="line">    <span class="keyword">if</span> (result == EFALUT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;错误ERROR!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        syscall(_SYSCALL_dhsyscall_, pid, <span class="number">1</span>, nicevalue, &amp;cur_prio, &amp;cur_nice);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;原来的 priority: [%d],  nice [%d]\n&quot;</span>, prev_prio,</span><br><span class="line">               prev_nice);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;现在的 priority: [%d], nice [%d]\n&quot;</span>, cur_prio,</span><br><span class="line">               cur_nice);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;现在的 priority: [%d], nice [%d]\n&quot;</span>, prev_prio,</span><br><span class="line">               prev_nice);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>B站计网课程学习总结（一）</title>
    <url>/2020-11-25-B%E7%AB%99%E8%AE%A1%E7%BD%91%E8%AF%BE%E7%A8%8B%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h2 id="B站计网课程学习总结（一）"><a href="#B站计网课程学习总结（一）" class="headerlink" title="B站计网课程学习总结（一）"></a>B站计网课程学习总结（一）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因HDU老师讲课学不进去（疯狂划水），在学习网站B站上找到了王道的计网视频，觉得讲的很不错，故根据此课程来总结学习大纲（快期末了QAQ）</p>
<a id="more"></a>

<h3 id="1-第一章综述"><a href="#1-第一章综述" class="headerlink" title="1.第一章综述"></a>1.第一章综述</h3>]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>ROS小车学习记录</title>
    <url>/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="ROS小车学习记录"><a href="#ROS小车学习记录" class="headerlink" title="ROS小车学习记录"></a>ROS小车学习记录</h2><h3 id="一、配置与连接"><a href="#一、配置与连接" class="headerlink" title="一、配置与连接"></a>一、配置与连接</h3><h4 id="1-配置VMware虚拟机及ROS-Kinetic-16-04-2"><a href="#1-配置VMware虚拟机及ROS-Kinetic-16-04-2" class="headerlink" title="1.配置VMware虚拟机及ROS Kinetic 16.04.2"></a>1.配置VMware虚拟机及ROS Kinetic 16.04.2</h4><p>a）安装好虚拟机及镜像，虚拟机初始设置为2核4G，设置为4核4G</p>
<a id="more"></a>

<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1606264498962.png" alt="1606264498962"></p>
<p>b）设置虚拟机网络模式为桥接模式，用Windows的无线网卡桥接</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/1606264982920.png" alt="1606264982920"></p>
<p>c）确认Windows IP地址和虚拟机 IP地址（应在同一网段下）</p>
<p>以本机为例：</p>
<p>windows IP：192.108.1.103</p>
<p>ROS IP：192.108.1.108</p>
<h4 id="2-树莓派Ubuntu-Mate系统安装"><a href="#2-树莓派Ubuntu-Mate系统安装" class="headerlink" title="2.树莓派Ubuntu Mate系统安装"></a>2.树莓派Ubuntu Mate系统安装</h4><p>注：若树莓派上自带有SD卡即Ubuntu Mate已默认安装，若没有需安装。</p>
<p>a）需要的软件和功能：<br>      Panasonic_SDFormatter<br>      ubuntu-mate-16.04<br>      Win32DiskImager</p>
<p>b）操作过程：<br>    1、Panasonic_SDFormatter格式化TF卡；<br>    2、Win32DiskImager工具将ubuntu-mate-16.04的img文件烧写到TF卡中，然后插入到<a href="http://bbs.elecfans.com/try.html">开发板</a>中。<br>    3、开发板连接鼠标和键盘、HDMI连接显示器、然后通电。通电以后需要对系统进行一些设置才能正常使用系统，具体操作可以根据向导来完成。<br>    4、<strong>连接WIFI</strong>。必须保证PC，虚拟机和小车处于同一网络下，然后连接WIFI，查看连接配置，<strong>通过路由器配置界面得到小车端的IP</strong>。<br>    小车端IP：192.168.1.109<br>    5、<strong>通过PC端的虚拟机测试是否能PING通小车端。</strong></p>
<p>c）存在问题与简便解决</p>
<p>使用上述操作过程可能会存在一些问题，如无法进入系统（彩虹屏）及无法连接WIFI等，可以通过修改系统启动boot项及更换系统网络配置文件解决，但较为繁琐，之后学长提供了一种简便方法：直接恢复已配置好的镜像即可。</p>
<p>使用工具：usb image tool</p>
<p>将上述第二步改为恢复镜像即可。</p>
<h4 id="3-使用ROS-Ubuntu连接小车端"><a href="#3-使用ROS-Ubuntu连接小车端" class="headerlink" title="3.使用ROS Ubuntu连接小车端"></a>3.使用ROS Ubuntu连接小车端</h4><p>a）ping通小车端</p>
<p>b）路由器管理界面找到小车端IP地址</p>
<p>假设 虚拟机IP地址 192.168.1.108</p>
<p>小车端 IP地址 192.168.1.109    </p>
<p>c）虚拟机中 打开终端，输入指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gedit ~&#x2F;.bashrc </span><br></pre></td></tr></table></figure>

<p>找到文档最下面，输入（修改）两行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ROS_MASTER_URI&#x3D;http:&#x2F;&#x2F;192.168.0.109:11311 #指定 XRobot 为 ROS Master</span><br><span class="line">export ROS_HOSTNAME&#x3D;192.168.0.108 #这里是虚拟机 IP</span><br></pre></td></tr></table></figure>

<p>保存退出。</p>
<p>d）虚拟机端：使用ssh指令连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh nodes@192.168.0.109</span><br></pre></td></tr></table></figure>

<p>连接到小车端，若连接成功，终端会变为nodes@xrobot：</p>
<p>e）小车端验证是否能ping通虚拟机端</p>
<p>f）ping通后，输入指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>

<p>最下面修改两行：（IP地址是小车端）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export ROS_MASTER_URI&#x3D;http:&#x2F;&#x2F;192.168.0.109:11311</span><br><span class="line">export ROS_HOSTNAME&#x3D;192.168.0.109</span><br></pre></td></tr></table></figure>

<p>保存即可。</p>
<h4 id="4-配置ssh免密登录"><a href="#4-配置ssh免密登录" class="headerlink" title="4.配置ssh免密登录"></a>4.配置ssh免密登录</h4><p>a）首先,在本地计算机生成公钥和私钥。打开终端,执行命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<p>一直按回车键选择默认选项,会在~/.ssh 目录下生成 id_rsa 和 id_rsa.pub 两个文件。然后将 id_rsa.pub 文件复制到远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scp ~&#x2F;.ssh&#x2F;id_rsa.pub username@ip_address:&#x2F;home&#x2F;username</span><br></pre></td></tr></table></figure>

<p>本机中，所用命令为<code>scp ~/.ssh/id_rsa.pub nodes@192.168.1.109:/home/nodes</code></p>
<p>b）将公钥文件 id_rsa.pub 拷贝到远程计算机后,SSH 登录到远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh username@ip_address</span><br></pre></td></tr></table></figure>

<p>其中 username 为远程计算机用户名,ip_address 为远程计算机的 IP 地址。</p>
<p>c）登录后,将id_rsa.pub 的文件内容追加写入到远程计算机的<br>~/.ssh/authorized_keys 文件中,并修改 authorized_keys 文件的权限:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys</span><br><span class="line">$ chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</span><br></pre></td></tr></table></figure>

<p>配置完成后,再登录远程计算机就无需输入密码。</p>
<p>d）接下来,即可配置 RoboWare Studio的远程调试参数进行远程调试<br>修改远程计算机<code>/etc/profile</code><br>首先,登录远程计算机:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh username@ip_address</span><br></pre></td></tr></table></figure>

<p>登录后,切换到 root 用户权限,将 ROS 环境变量信息写入到/etc/profile 文件中:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo su</span><br><span class="line">$ echo &quot;source &#x2F;opt&#x2F;ros&#x2F;indigo&#x2F;setup.bash&quot; &gt;&gt; &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<p>接下来在roboware上配置远程主控信息</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/3.png" alt="3"></p>
<p>步骤：IP，用户名（nodes），一直敲回车就可以了。</p>
<h3 id="二、调试及运行"><a href="#二、调试及运行" class="headerlink" title="二、调试及运行"></a>二、调试及运行</h3><h4 id="1-基本模块的配置"><a href="#1-基本模块的配置" class="headerlink" title="1.基本模块的配置"></a>1.基本模块的配置</h4><ul>
<li><p><strong>GY85（方向位置模块）</strong></p>
<ol>
<li><p>开启I2C：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>

<p>选择3 Interfacing Options</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/4.png" alt="4"></p>
<p>选择P4</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/5.png" alt="5"></p>
<p>没有在/dev/目录下发现i2c-x的设备，这个时候需要做以下操作<br>(1) 添加i2c模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;modules</span><br></pre></td></tr></table></figure>

<p>然后添加以下两行内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i2c-bcm2708 </span><br><span class="line">i2c-dev</span><br></pre></td></tr></table></figure>

<p>再次reboot，就可以看见了。</p>
<p>(2) 安装i2c工具，查看i2c设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install i2c-tools</span><br></pre></td></tr></table></figure>

<p>提供以下i2c的工具命令，如<code>i2cdetect</code>，<code>i2cget</code>，<code>i2cset</code>等。</p>
<p>(3) 执行命令查看i2c设备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo i2cdetect -y 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>GY85连线方式</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/6.png" alt="6"></p>
</li>
<li><p>github源码下载<code>https://github.com/RigacciOrg/py-qmc5883l</code></p>
<p>安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>GPS模块</strong></p>
<ol>
<li><p>数据线连接GPS     <code>/ttyACM0</code></p>
</li>
<li><p>输入<code>lsusb</code>找到设备ID</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/7.png" alt="7"></p>
<p>ID后面的1546对应着<code>idVendor</code>，01a7对应<code>idProduct</code></p>
</li>
<li><p>在<code>/etc/udev/rules.d/</code>，找到规则文件<code>xrobot-usb.rules</code>，加入一下文字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KERNEL&#x3D;&#x3D;&quot;ttyACM?&quot;, ATTRS&#123;idVendor&#125;&#x3D;&#x3D;&quot;1546&quot;, ATTRS&#123;idProduct&#125;&#x3D;&#x3D;&quot;01a7&quot;, MODE&#x3D;&quot;0666&quot; SYMLINK+&#x3D;&quot;gps&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过minicom获取串口数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install minicom</span><br><span class="line">minicom -b 9600 -o -D &#x2F;dev&#x2F;gps</span><br></pre></td></tr></table></figure>

<p>获取的数据</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/8.png" alt="8"></p>
</li>
<li><p>测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> serial </span><br><span class="line"><span class="comment">#导入serial模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义读取坐标函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_gps</span>():</span></span><br><span class="line">    ser = serial.Serial(<span class="string">&quot;/dev/ttyUSB0&quot;</span>,<span class="number">9600</span>)</span><br><span class="line">    data = []</span><br><span class="line">    line = <span class="built_in">str</span>(<span class="built_in">str</span>(ser.readline())[<span class="number">2</span>:])</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;$GNGGA&#x27;</span>):</span><br><span class="line">        print(<span class="string">&#x27;接收的数据：&#x27;</span>+<span class="built_in">str</span>(line))</span><br><span class="line">        line = <span class="built_in">str</span>(line).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        jing = <span class="built_in">float</span>(line[<span class="number">4</span>][:<span class="number">-7</span>])+<span class="built_in">float</span>(line[<span class="number">4</span>][<span class="number">-7</span>:])/<span class="number">60</span></span><br><span class="line">        wei  = <span class="built_in">float</span>(line[<span class="number">2</span>][:<span class="number">-7</span>])+<span class="built_in">float</span>(line[<span class="number">2</span>][<span class="number">-7</span>:])/<span class="number">60</span></span><br><span class="line">        data.append(jing)</span><br><span class="line">        data.append(wei)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(data[<span class="number">0</span>]),<span class="built_in">float</span>(data[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p>若有数据返回，即可使用。</p>
</li>
</ol>
<blockquote>
<p>注：在运行过程中会出现获取不到数据的情况（数据内部为空值），若获取不到数据，建议选取空旷地带，受信号干扰小的地方进行测试（本人在实验室和宿舍测试过程中，数据总断断续续）</p>
<p>附三个相关链接：</p>
<p><a href="https://www.cnblogs.com/wjyHIT2011/articles/6795249.html">https://www.cnblogs.com/wjyHIT2011/articles/6795249.html</a></p>
<p><a href="https://blog.csdn.net/weixin_44524040/article/details/90215917">https://blog.csdn.net/weixin_44524040/article/details/90215917</a></p>
<p><a href="https://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html">https://www.cnblogs.com/hangxin1940/archive/2013/04/02/2997077.html</a></p>
</blockquote>
</li>
<li><p><strong>DHT11（温湿度模块）</strong></p>
<ol>
<li><p>引脚配置及连接</p>
<p>树莓派3B引脚图：</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/10.png" alt="10"></p>
<p>传感器模块图：</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/9.png" alt="9"></p>
<p>连接方式：</p>
<p>VCC（或正极） — 树莓派的3v电源</p>
<p>GND （地线或者负极）— 树莓派的GND接口</p>
<p>DATA （D或者out） —树莓派的GPIO引脚</p>
</li>
<li><p>连接好后，测试</p>
<p>python使用的是RPi.gpio库来控制引脚，这个库在树莓派里面已经导入了 ，直接使用即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line">channel =<span class="number">4</span> //引脚号，具体接口看上图配置</span><br><span class="line">data = []</span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">GPIO.setmode(GPIO.BCM)//编码方式</span><br><span class="line"> </span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">GPIO.setup(channel, GPIO.OUT)</span><br><span class="line">GPIO.output(channel, GPIO.LOW)</span><br><span class="line">time.sleep(<span class="number">0.02</span>)</span><br><span class="line">GPIO.output(channel, GPIO.HIGH)</span><br><span class="line">GPIO.setup(channel, GPIO.IN)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> GPIO.<span class="built_in">input</span>(channel) == GPIO.LOW:</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">while</span> GPIO.<span class="built_in">input</span>(channel) == GPIO.HIGH:</span><br><span class="line">  <span class="keyword">continue</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="number">40</span>:</span><br><span class="line">  k = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> GPIO.<span class="built_in">input</span>(channel) == GPIO.LOW:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  <span class="keyword">while</span> GPIO.<span class="built_in">input</span>(channel) == GPIO.HIGH:</span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> k &gt; <span class="number">100</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">if</span> k &lt; <span class="number">8</span>:</span><br><span class="line">    data.append(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    data.append(<span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">  j += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;sensor is working.&quot;</span></span><br><span class="line"><span class="built_in">print</span> data</span><br><span class="line"> </span><br><span class="line">humidity_bit = data[<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line">humidity_point_bit = data[<span class="number">8</span>:<span class="number">16</span>]</span><br><span class="line">temperature_bit = data[<span class="number">16</span>:<span class="number">24</span>]</span><br><span class="line">temperature_point_bit = data[<span class="number">24</span>:<span class="number">32</span>]</span><br><span class="line">check_bit = data[<span class="number">32</span>:<span class="number">40</span>]</span><br><span class="line"> </span><br><span class="line">humidity = <span class="number">0</span></span><br><span class="line">humidity_point = <span class="number">0</span></span><br><span class="line">temperature = <span class="number">0</span></span><br><span class="line">temperature_point = <span class="number">0</span></span><br><span class="line">check = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">  humidity += humidity_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</span><br><span class="line">  humidity_point += humidity_point_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</span><br><span class="line">  temperature += temperature_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</span><br><span class="line">  temperature_point += temperature_point_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</span><br><span class="line">  check += check_bit[i] * <span class="number">2</span> ** (<span class="number">7</span>-i)</span><br><span class="line"> </span><br><span class="line">tmp = humidity + humidity_point + temperature + temperature_point</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> check == tmp:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;temperature :&quot;</span>, temperature, <span class="string">&quot;*C, humidity :&quot;</span>, humidity, <span class="string">&quot;%&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;wrong&quot;</span></span><br><span class="line">  <span class="built_in">print</span> <span class="string">&quot;temperature :&quot;</span>, temperature, <span class="string">&quot;*C, humidity :&quot;</span>, humidity, <span class="string">&quot;% check :&quot;</span>, check, <span class="string">&quot;, tmp :&quot;</span>, tmp</span><br><span class="line"> </span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure>

<p>这里要注意，编码方式和引脚号</p>
<p>（1）编码方式：PR库有两种方式，一种是bcm另一种是wiringPi的方式，两者的区别大致是bcm的的pin的序号0，1，3，。。。是与每一个gpio引脚对应的，不包含gnd和电源之类的在内，而wiringPi则是从电源开始为0，然后按增序排。使用python的脚本，只需要在setmode函数里面制定编码方式即可。</p>
<p>（2）引脚号：程序里面用的是bcm的4号（即channel变量），注意连线方式是否与代码匹配。</p>
<p>结果图如下：</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/11.png" alt="11"></p>
</li>
</ol>
<blockquote>
<p>附参考链接：</p>
<p><a href="https://blog.csdn.net/u010900754/article/details/53078615?locationNum=13&amp;fps=1">https://blog.csdn.net/u010900754/article/details/53078615?locationNum=13&amp;fps=1</a></p>
<p><a href="https://blog.csdn.net/wc810267705/article/details/79586481?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">https://blog.csdn.net/wc810267705/article/details/79586481?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control</a></p>
<p><a href="https://blog.csdn.net/weixin_39289876/article/details/105268867?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control">https://blog.csdn.net/weixin_39289876/article/details/105268867?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2.control</a></p>
</blockquote>
</li>
<li><p><strong>USB摄像头</strong></p>
<ol>
<li><p>本地监控（使用motion模块）</p>
<p>具体配置：</p>
<p>1）安装motion</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install motion</span><br></pre></td></tr></table></figure>

<p>2）配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;default&#x2F;motion</span><br></pre></td></tr></table></figure>

<p> 将里面的no修改成yes，让motion可以一直在后台运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start_motion_daemon&#x3D;yes </span><br></pre></td></tr></table></figure>

<p>然后打开配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;motion&#x2F;motion.conf</span><br></pre></td></tr></table></figure>

<p>找到相关配置修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemon on  #off改成on</span><br><span class="line">width 800  </span><br><span class="line">height 600 #根据摄像头像素自行更改</span><br><span class="line">framerate 60 #这个代表帧率，50左右效果还行，可根据效果自行更改</span><br><span class="line">stream_localhost off    #设为off</span><br><span class="line">stream_port 8081</span><br><span class="line">stream_maxrate 100 #关键配置，更改后流畅</span><br></pre></td></tr></table></figure>

<p>3）启动motion</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo motion</span><br></pre></td></tr></table></figure>

<p>4）查看视频数据</p>
<p> 局域网内的设备打开浏览器访问<strong>树莓派IP:8081</strong>即可实现。</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/12.png" alt="12"></p>
<p>5）退出motion</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo killall -TERM motion</span><br><span class="line">或service motion stop</span><br></pre></td></tr></table></figure>

<blockquote>
<p>相关链接：</p>
<p><a href="https://www.jb51.net/article/163690.htm">https://www.jb51.net/article/163690.htm</a></p>
<p><a href="https://blog.csdn.net/qq_18471449/article/details/104119071">https://blog.csdn.net/qq_18471449/article/details/104119071</a></p>
</blockquote>
</li>
<li><p>使用udp协议传输视频帧上传服务器在线监控（opencv+python）</p>
<p>首先测试能否顺利调用摄像头：</p>
<p>终端中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python &#x2F;&#x2F;确认python版本</span><br><span class="line">uname -a &#x2F;&#x2F;确认OS版本</span><br><span class="line">lsb_release -a </span><br></pre></td></tr></table></figure>

<p> 安装OpenCV和Python版的OpenCV安装包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libopencv-dev</span><br><span class="line">sudo apt-get install python-opencv</span><br></pre></td></tr></table></figure>

<p> 测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="comment">#初期化USB摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span>( cap.isOpened() ):</span><br><span class="line"> <span class="comment">#USB摄像头工作时,读取一帧图像</span></span><br><span class="line"> ret, frame = cap.read()</span><br><span class="line"> <span class="comment">#显示图像窗口在树莓派的屏幕上</span></span><br><span class="line"> cv2.imshow(<span class="string">&#x27;Capture&#x27;</span>,frame)</span><br><span class="line"> <span class="comment">#按下q键退出</span></span><br><span class="line"> key = cv2.waitKey(<span class="number">1</span>)</span><br><span class="line"> <span class="comment">#print( &#x27;%08X&#x27; % (key&amp;0xFFFFFFFF) )</span></span><br><span class="line"> <span class="keyword">if</span> key &amp; <span class="number">0x00FF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"> <span class="keyword">break</span></span><br><span class="line"><span class="comment"># 释放资源和关闭窗口</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>测试输出：</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/13.png" alt="13"></p>
<p>若测试成功，即可进行UDP传输，相关原理如下：</p>
<ul>
<li><p>视频传输用UDP还是TCP</p>
<p>​        首先考虑用哪种传输方式，平常TCP用的非常多，但是像视频帧这种数据用TCP不是太合适，因为视频数据的传输最先要考虑的是速度而不是准确性，视频帧的数据量很大，帧间隔也非常短，需要尽量保证传输速度，同时丢失一些数据是无所谓的。TCP需要维护连接、保证数据包正确，会耗费一些时间，因此应该使用UDP，就像所有参考书上说的，UDP不在乎是否建立连接，也不管数据是否能被准确接收，只关心能否把数据发送出去而已。</p>
<p>​        在Python的socket代码中也可直观地看到UDP的特点，对于发送方，我们通过<code>server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</code>创建UDP套接字对象，然后执行<code>server.connect((HOST,PORT))</code> 指定发送方地址，但其实connect函数直接就返回了，不像TCP中的客户端会等待连接成功，接着就可直接在套接字对象上调用send函数发送数据了，这个过程根本没确立连接。</p>
</li>
<li><p>图像传输中的编解码</p>
<p>​        用UDP传输图像有一个很关键的问题需要考虑，就是图像的大小。根据UDP协议，单个包的数据大小最大只能65507个字节（去掉包头），而一般直接从摄像头采集的图像帧的大小比这个数要大得多，以我的逻辑C270为例，单幅图像的大小为480X640X3个字节，远大于65507，因此一个包是没法发送完的。解决方法有两种，一种是把图像拆成几次进行发送，相应的接收端用个循环多次接收，这种方法可以完整地接收数据，但是速度肯定受到影响，而且可能要添加一些自定义规则，徒增麻烦；另一种方法就是发送前先对图像进行编码压缩，接收后再解码，清晰度会有所下降，但是可以保持速度上的优势，这种方式比较合适。</p>
<p>​        OpenCV中的imencode和imdecode方法可分别用于图像的编码和解码。imencode根据指定的标识将图像数据编码并存入缓存区，函数原型为<code>cv2.imencode(ext, img[, params]) → retval, buf</code>，ext为文件扩展名，指定了存储格式，如’.jpg’；img为需要编码的图像数据； params为指定的编码标识，其形式为<code>paramId_1, paramValue_1, paramId_2, paramValue_2, ... ，</code>对于jpg格式，可以指定标识为CV_IMWRITE_JPEG_QUALITY ，其对应的值在0到100之间，表示了压缩质量，值越大压缩率越大，编码后的数据量越小，但解码后的图像质量也越差。<br>imdecode从缓存区读取图像数据，通过指定标识，可以实现指定的解码格式。imdecode的函数原型为<code>cv2.imdecode(buf, flags) → retval</code> ，其中flags指定图像的读取类型，实际上就是指定了以多少深度多少通道读取图像，比如CV_LOAD_IMAGE_ANYDEPTH（即整数2）表示单个通道，深度不变的灰度图；CV_LOAD_IMAGE_COLOR（即整数1）表示3通道、8位深度的彩色图。</p>
</li>
</ul>
<p>结合套接字对象和编解码函数，就可以编写发送端的代码了，不过还有一个需要注意的地方是发送和接收的数据格式问题，套接字的发送和接收都是字节流，或者说是byte数组，发送数据时需要以字节流格式发送，接收数据后需要把字节流类型转换成合适的数据类型。</p>
<p>从摄像头获取的图像是480X640X3的numpy.ndarray类型，通过imencode编码，得到？X1的numpy.ndarray对象，经测试，这个对象可以直接发送出去；在接收端，获得的是byte数组，这个数组直接做imdecode的参数会报错，经调试，发现还需要把数组转换成numpy.ndarray类型。</p>
<ul>
<li><strong>树莓派端</strong>代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">HOST=<span class="string">&#x27;192.168.1.122&#x27;</span></span><br><span class="line">PORT=<span class="number">9999</span></span><br><span class="line">server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#socket对象</span></span><br><span class="line">server.connect((HOST,PORT))</span><br><span class="line">print(<span class="string">&#x27;now starting to send frames...&#x27;</span>)</span><br><span class="line">capture=cv2.VideoCapture(<span class="number">0</span>) <span class="comment">#VideoCapture对象，可获取摄像头设备的数据</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    success,frame=capture.read()</span><br><span class="line">    result,imgencode=cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>,frame,[cv2.IMWRITE_JPEG_QUALITY,<span class="number">50</span>]) <span class="comment">#编码</span></span><br><span class="line">    server.sendall(struct.pack(<span class="string">&#x27;i&#x27;</span>,imgencode.shape[<span class="number">0</span>])) <span class="comment">#发送编码后的字节长度，这个值不是固定的</span></span><br><span class="line">    server.sendall(imgencode) <span class="comment">#发送视频帧数据</span></span><br><span class="line">    print(<span class="string">&#x27;have sent one frame&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">  print(e)</span><br><span class="line">  server.sendall(struct.pack(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)) <span class="comment">#发送关闭消息</span></span><br><span class="line">  capture.release()</span><br><span class="line">  server.close()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>服务器端</strong>代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">HOST=<span class="string">&#x27;192.168.191.122&#x27;</span></span><br><span class="line">PORT=<span class="number">9999</span></span><br><span class="line">buffSize=<span class="number">65535</span></span><br><span class="line">server=socket.socket(socket.AF_INET,socket.SOCK_DGRAM) <span class="comment">#创建socket对象</span></span><br><span class="line">server.bind((HOST,PORT))</span><br><span class="line">print(<span class="string">&#x27;now waiting for frames...&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  data,address=server.recvfrom(buffSize) <span class="comment">#先接收的是字节长度</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(data)==<span class="number">1</span> <span class="keyword">and</span> data[<span class="number">0</span>]==<span class="number">1</span>: <span class="comment">#如果收到关闭消息则停止程序</span></span><br><span class="line">    server.close()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    exit()</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(data)!=<span class="number">4</span>: <span class="comment">#进行简单的校验，长度值是int类型，占四个字节</span></span><br><span class="line">    length=<span class="number">0</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    length=struct.unpack(<span class="string">&#x27;i&#x27;</span>,data)[<span class="number">0</span>] <span class="comment">#长度值</span></span><br><span class="line">  data,address=server.recvfrom(buffSize) <span class="comment">#接收编码图像数据</span></span><br><span class="line">  <span class="keyword">if</span> length!=<span class="built_in">len</span>(data): <span class="comment">#进行简单的校验</span></span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">  data=numpy.array(<span class="built_in">bytearray</span>(data)) <span class="comment">#格式转换</span></span><br><span class="line">  imgdecode=cv2.imdecode(data,<span class="number">1</span>) <span class="comment">#解码</span></span><br><span class="line">  print(<span class="string">&#x27;have received one frame&#x27;</span>)</span><br><span class="line">  cv2.imshow(<span class="string">&#x27;frames&#x27;</span>,imgdecode) <span class="comment">#窗口显示</span></span><br><span class="line">  <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>)==<span class="number">27</span>: <span class="comment">#按下“ESC”退出</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">server.close()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<ul>
<li><p>测试验证</p>
<p>使用本地客户端可以流畅显示，服务器端还未对接，之后贴图。</p>
</li>
</ul>
<blockquote>
<p>相关链接：</p>
<p><a href="https://www.jb51.net/article/174308.htm">https://www.jb51.net/article/174308.htm</a></p>
<p><a href="https://www.jb51.net/article/163696.htm">https://www.jb51.net/article/163696.htm</a></p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h4 id="2-小车运动模块代码详解"><a href="#2-小车运动模块代码详解" class="headerlink" title="2.小车运动模块代码详解"></a>2.小车运动模块代码详解</h4><ul>
<li><p><strong>键盘控制</strong></p>
<p>a）<strong>小车端</strong>：输入指令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roslaunch xrobot_base xrobot_odom_encoder.launch</span><br></pre></td></tr></table></figure>

<p>b）<strong>虚拟机端</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roscore</span><br><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py</span><br></pre></td></tr></table></figure>

<p>teleop_twist_keyboard.py具体源码如下：(建议从github下clone下来)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> roslib; roslib.load_manifest(<span class="string">&#x27;teleop_twist_keyboard&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, select, termios, tty</span><br><span class="line"></span><br><span class="line">msg = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Reading from the keyboard  and Publishing to Twist!</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">Moving around:</span></span><br><span class="line"><span class="string">   u    i    o</span></span><br><span class="line"><span class="string">   j    k    l</span></span><br><span class="line"><span class="string">   m    ,    .</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">For Holonomic mode (strafing), hold down the shift key:</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">   U    I    O</span></span><br><span class="line"><span class="string">   J    K    L</span></span><br><span class="line"><span class="string">   M    &lt;    &gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">t : up (+z)</span></span><br><span class="line"><span class="string">b : down (-z)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">anything else : stop</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">q/z : increase/decrease max speeds by 10%</span></span><br><span class="line"><span class="string">w/x : increase/decrease only linear speed by 10%</span></span><br><span class="line"><span class="string">e/c : increase/decrease only angular speed by 10%</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CTRL-C to quit</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">moveBindings = &#123;</span><br><span class="line">		<span class="string">&#x27;i&#x27;</span>:(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;o&#x27;</span>:(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>),</span><br><span class="line">		<span class="string">&#x27;j&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),</span><br><span class="line">		<span class="string">&#x27;l&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>),</span><br><span class="line">		<span class="string">&#x27;u&#x27;</span>:(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),</span><br><span class="line">		<span class="string">&#x27;,&#x27;</span>:(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;.&#x27;</span>:(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>),</span><br><span class="line">		<span class="string">&#x27;m&#x27;</span>:(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>),</span><br><span class="line">		<span class="string">&#x27;O&#x27;</span>:(<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;I&#x27;</span>:(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;J&#x27;</span>:(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;L&#x27;</span>:(<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;U&#x27;</span>:(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;&lt;&#x27;</span>:(<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;&gt;&#x27;</span>:(<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;M&#x27;</span>:(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;t&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),</span><br><span class="line">		<span class="string">&#x27;b&#x27;</span>:(<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>),</span><br><span class="line">	       &#125;</span><br><span class="line"></span><br><span class="line">speedBindings=&#123;</span><br><span class="line">		<span class="string">&#x27;q&#x27;</span>:(<span class="number">1.1</span>,<span class="number">1.1</span>),</span><br><span class="line">		<span class="string">&#x27;z&#x27;</span>:(<span class="number">.9</span>,<span class="number">.9</span>),</span><br><span class="line">		<span class="string">&#x27;w&#x27;</span>:(<span class="number">1.1</span>,<span class="number">1</span>),</span><br><span class="line">		<span class="string">&#x27;x&#x27;</span>:(<span class="number">.9</span>,<span class="number">1</span>),</span><br><span class="line">		<span class="string">&#x27;e&#x27;</span>:(<span class="number">1</span>,<span class="number">1.1</span>),</span><br><span class="line">		<span class="string">&#x27;c&#x27;</span>:(<span class="number">1</span>,<span class="number">.9</span>),</span><br><span class="line">	      &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKey</span>():</span></span><br><span class="line">	tty.setraw(sys.stdin.fileno())</span><br><span class="line">	select.select([sys.stdin], [], [], <span class="number">0</span>)</span><br><span class="line">	key = sys.stdin.read(<span class="number">1</span>)</span><br><span class="line">	termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)</span><br><span class="line">	<span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vels</span>(<span class="params">speed,turn</span>):</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;currently:\tspeed %s\tturn %s &quot;</span> % (speed,turn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    	settings = termios.tcgetattr(sys.stdin)</span><br><span class="line">	</span><br><span class="line">	pub = rospy.Publisher(<span class="string">&#x27;cmd_vel&#x27;</span>, Twist, queue_size = <span class="number">1</span>)</span><br><span class="line">	rospy.init_node(<span class="string">&#x27;teleop_twist_keyboard&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	speed = rospy.get_param(<span class="string">&quot;~speed&quot;</span>, <span class="number">0.5</span>)</span><br><span class="line">	turn = rospy.get_param(<span class="string">&quot;~turn&quot;</span>, <span class="number">1.0</span>)</span><br><span class="line">	x = <span class="number">0</span></span><br><span class="line">	y = <span class="number">0</span></span><br><span class="line">	z = <span class="number">0</span></span><br><span class="line">	th = <span class="number">0</span></span><br><span class="line">	status = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		print(msg)</span><br><span class="line">		print(vels(speed,turn))</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">			key = getKey()</span><br><span class="line">			<span class="keyword">if</span> key <span class="keyword">in</span> moveBindings.keys():</span><br><span class="line">				x = moveBindings[key][<span class="number">0</span>]</span><br><span class="line">				y = moveBindings[key][<span class="number">1</span>]</span><br><span class="line">				z = moveBindings[key][<span class="number">2</span>]</span><br><span class="line">				th = moveBindings[key][<span class="number">3</span>]</span><br><span class="line">			<span class="keyword">elif</span> key <span class="keyword">in</span> speedBindings.keys():</span><br><span class="line">				speed = speed * speedBindings[key][<span class="number">0</span>]</span><br><span class="line">				turn = turn * speedBindings[key][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">				print(vels(speed,turn))</span><br><span class="line">				<span class="keyword">if</span> (status == <span class="number">14</span>):</span><br><span class="line">					print(msg)</span><br><span class="line">				status = (status + <span class="number">1</span>) % <span class="number">15</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				x = <span class="number">0</span></span><br><span class="line">				y = <span class="number">0</span></span><br><span class="line">				z = <span class="number">0</span></span><br><span class="line">				th = <span class="number">0</span></span><br><span class="line">				<span class="keyword">if</span> (key == <span class="string">&#x27;\x03&#x27;</span>):</span><br><span class="line">					<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">			twist = Twist()</span><br><span class="line">			twist.linear.x = x*speed; twist.linear.y = y*speed; twist.linear.z = z*speed;</span><br><span class="line">			twist.angular.x = <span class="number">0</span>; twist.angular.y = <span class="number">0</span>; twist.angular.z = th*turn</span><br><span class="line">			pub.publish(twist)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		print(e)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">finally</span>:</span><br><span class="line">		twist = Twist()</span><br><span class="line">		twist.linear.x = <span class="number">0</span>; twist.linear.y = <span class="number">0</span>; twist.linear.z = <span class="number">0</span></span><br><span class="line">		twist.angular.x = <span class="number">0</span>; twist.angular.y = <span class="number">0</span>; twist.angular.z = <span class="number">0</span></span><br><span class="line">		pub.publish(twist)</span><br><span class="line"></span><br><span class="line">    		termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>即可实现键盘控制，具体操作如下图：</p>
<p><img src="/2020-11-24-ROS%E5%B0%8F%E8%BD%A6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/14.png" alt="14"></p>
<p>I 前进    &lt; 后退     J 左转     L 右转<br>U 左转前进    O 右转前进     M 左转后退     &gt;右转后退</p>
<p>每按一次，XRobot 只会执行指令 1 秒就会停止。</p>
<p>如果无反应，需要等待数据同步后重试，若不行，重启即可。</p>
</li>
<li><p><strong>自动避障</strong>（由陈硕学长编写实现）</p>
<p>具体实现自动行驶及避障功能（代码优化还未实现）</p>
<p>源码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/thread.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sensor_msgs/LaserScan.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/algorithm/string.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;geometry_msgs/Twist.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RAD2DEG(x) ((x)*180./M_PI)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi 3.1415926535897932384626433832795</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EARTH_RADIUS 6378.137 <span class="comment">//地球半径 KM</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">latlon</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> lat;</span><br><span class="line">    <span class="keyword">float</span> lon;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d * pi /<span class="number">180.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//距离</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">RealDistance</span><span class="params">(<span class="keyword">double</span> lat1,<span class="keyword">double</span> lng1,<span class="keyword">double</span> lat2,<span class="keyword">double</span> lng2)</span><span class="comment">//lat1第一个点纬度,lng1第一个点经度,lat2第二个点纬度,lng2第二个点经度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> a;</span><br><span class="line">   	<span class="keyword">double</span> b;</span><br><span class="line">   	<span class="keyword">double</span> radLat1 = rad(lat1);</span><br><span class="line">   	<span class="keyword">double</span> radLat2 = rad(lat2);</span><br><span class="line">   	a = radLat1 - radLat2;</span><br><span class="line">   	b = rad(lng1) - rad(lng2);</span><br><span class="line">   	<span class="keyword">double</span> s = <span class="number">2</span> * <span class="built_in">asin</span>(<span class="built_in">sqrt</span>(<span class="built_in">pow</span>(<span class="built_in">sin</span>(a/<span class="number">2</span>),<span class="number">2</span>) + <span class="built_in">cos</span>(radLat1)*<span class="built_in">cos</span>(radLat2)*<span class="built_in">pow</span>(<span class="built_in">sin</span>(b/<span class="number">2</span>),<span class="number">2</span>)));</span><br><span class="line">    s = s * EARTH_RADIUS;</span><br><span class="line">    s = s * <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方向</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_angle</span><span class="params">(<span class="keyword">double</span> lat1, <span class="keyword">double</span> lng1, <span class="keyword">double</span> lat2, <span class="keyword">double</span> lng2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> lat1_rad = lat1 * pi /<span class="number">180</span>;</span><br><span class="line">	<span class="keyword">double</span> lng1_rad = lng1 * pi /<span class="number">180</span>;</span><br><span class="line">	<span class="keyword">double</span> lat2_rad = lat2 * pi /<span class="number">180</span>;</span><br><span class="line">	<span class="keyword">double</span> lng2_rad = lng2 * pi /<span class="number">180</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> x = <span class="built_in">sin</span>(lng2_rad - lng1_rad) * <span class="built_in">cos</span>(lat2_rad);</span><br><span class="line">	<span class="keyword">double</span> y = <span class="built_in">cos</span>(lat1_rad) * <span class="built_in">sin</span>(lat2_rad) - <span class="built_in">sin</span>(lat1_rad) * <span class="built_in">cos</span>(lat2_rad) * <span class="built_in">cos</span>(lng2_rad - lng1_rad);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> brng = <span class="built_in">atan2</span>(x,y) * <span class="number">180</span> / pi;</span><br><span class="line">	<span class="keyword">int</span> fangxiang  = brng + <span class="number">360</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> fangxiang % <span class="number">360</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">multiThreadListener</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        multiThreadListener()</span><br><span class="line">        &#123;</span><br><span class="line">            cmd_pub = n.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;auto_vel&quot;</span>,<span class="number">50</span>);</span><br><span class="line">            GPS = n.subscribe(<span class="string">&quot;GPS&quot;</span>, <span class="number">50</span>, &amp;multiThreadListener::get_gps,<span class="keyword">this</span>);</span><br><span class="line">            GY85 = n.subscribe(<span class="string">&quot;GY85&quot;</span>, <span class="number">50</span>, &amp;multiThreadListener::get_gy85,<span class="keyword">this</span>);</span><br><span class="line">            Lidar = n.subscribe(<span class="string">&quot;scan&quot;</span>, <span class="number">1000</span>, &amp;multiThreadListener::get_lidar,<span class="keyword">this</span>);</span><br><span class="line">            route = n.subscribe(<span class="string">&quot;send_route&quot;</span>,<span class="number">50</span>, &amp;multiThreadListener::get_route, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">get_gps</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">get_gy85</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">get_lidar</span><span class="params">(<span class="keyword">const</span> sensor_msgs::LaserScan::ConstPtr&amp; scan)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">get_route</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        ros::NodeHandle n;</span><br><span class="line">        ros::Subscriber GPS;</span><br><span class="line">        ros::Subscriber GY85;</span><br><span class="line">        ros::Subscriber Lidar;</span><br><span class="line">        ros::Subscriber route;</span><br><span class="line">        ros::Publisher cmd_pub;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span>&lt;latlon&gt; Mul_gps; </span><br><span class="line">        <span class="built_in">list</span>&lt;latlon&gt; path; <span class="comment">//路径信息</span></span><br><span class="line">        latlon runtime_gps;<span class="comment">//实时GPS信息</span></span><br><span class="line">        <span class="keyword">float</span> car_direction; <span class="comment">//实时方向</span></span><br><span class="line">        <span class="keyword">float</span> new_liadr[<span class="number">90</span>]; <span class="comment">//雷达数据</span></span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取GPS实时数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiThreadListener::get_gps</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ROS_INFO(&quot;I heard: [%s]&quot;, msg-&gt;data.c_str());</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">    boost::split(vec, msg-&gt;data,boost::is_any_of(<span class="string">&quot;,&quot;</span>), boost::token_compress_on);</span><br><span class="line">    runtime_gps.lat = atof(vec[<span class="number">0</span>].c_str());</span><br><span class="line">    runtime_gps.lon = atof(vec[<span class="number">1</span>].c_str());</span><br><span class="line">    <span class="comment">// printf(&quot;%f  %f\n&quot;,runtime_gps.lon,runtime_gps.lat);</span></span><br><span class="line">    <span class="comment">// ros::Rate loop_rate(0.5);//block chatterCallback2()</span></span><br><span class="line">    <span class="comment">// loop_rate.sleep();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取GY85车头实时方向数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiThreadListener::get_gy85</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ROS_INFO(&quot;I heard: [%s]&quot;, msg-&gt;data.c_str());</span></span><br><span class="line">    <span class="comment">//car_direction = atof(msg-&gt;data.c_str());</span></span><br><span class="line">    <span class="keyword">int</span> direction = atof(msg-&gt;data.c_str()) - <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">if</span>(direction &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        car_direction = direction;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        car_direction = direction + <span class="number">360</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;,car_direction);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取雷达实时数据*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiThreadListener::get_lidar</span><span class="params">(<span class="keyword">const</span> sensor_msgs::LaserScan::ConstPtr&amp; scan)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">90</span>; i++) &#123;</span><br><span class="line">        new_liadr[i] = scan-&gt;ranges[i+<span class="number">135</span>];</span><br><span class="line">        <span class="comment">//printf(&quot;%f \n&quot;,new_liadr[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取规划的路径信息*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiThreadListener::get_route</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    latlon position;</span><br><span class="line">    path.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((msg-&gt;data).length()!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vec;</span><br><span class="line">        boost::split(vec, msg-&gt;data,boost::is_any_of(<span class="string">&quot;,&quot;</span>), boost::token_compress_on);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vec.size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                position.lon = atof(vec[i].c_str());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">2</span> == <span class="number">1</span>)&#123;</span><br><span class="line">                position.lat = atof(vec[i].c_str());</span><br><span class="line">                path.push_back(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiThreadListener::move</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> last_min = <span class="number">-1</span>;</span><br><span class="line">    geometry_msgs::Twist msg; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">90</span>; j++)&#123;</span><br><span class="line">        new_liadr[j] = <span class="number">0.8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//printf(&quot;move %d\n&quot;,path.size());</span></span><br><span class="line">        <span class="keyword">if</span>(path.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            latlon next_Destination = path.front();<span class="comment">//下一目标点</span></span><br><span class="line">            <span class="comment">//printf(&quot;next_Destination %f %f\n&quot;,next_Destination.lat,next_Destination.lon);</span></span><br><span class="line">            <span class="keyword">int</span> move_direction = get_angle(runtime_gps.lat,runtime_gps.lon,next_Destination.lat,next_Destination.lon);<span class="comment">//应该前进运动的方向，与车实时的方向不同</span></span><br><span class="line">            <span class="comment">//printf(&quot;move_direction %d\n&quot;,move_direction);</span></span><br><span class="line">            <span class="keyword">if</span>(RealDistance(runtime_gps.lat,runtime_gps.lon,next_Destination.lat,next_Destination.lon)&lt;=<span class="number">4</span>)&#123;</span><br><span class="line">                path.pop_front();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">float</span> min = *min_element(new_liadr,new_liadr + <span class="keyword">sizeof</span>(new_liadr)/<span class="keyword">sizeof</span>(new_liadr[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">int</span> min_index = distance(new_liadr, min_element(new_liadr, new_liadr + <span class="keyword">sizeof</span>(new_liadr)/<span class="keyword">sizeof</span>(new_liadr[<span class="number">0</span>])));</span><br><span class="line">            <span class="keyword">if</span>(min &lt;= <span class="number">0.4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(min_index &gt;=<span class="number">0</span> &amp;&amp; min_index &lt;=<span class="number">45</span> &amp;&amp; (last_min == <span class="number">-1</span> || (last_min &gt;= <span class="number">0</span> &amp;&amp; last_min &lt;=<span class="number">45</span>)) &amp;&amp; i &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">0.4</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(min_index &gt; <span class="number">45</span> &amp;&amp; min_index &lt; <span class="number">90</span> &amp;&amp; (last_min == <span class="number">-1</span> || (last_min &gt; <span class="number">45</span> &amp;&amp; last_min &lt; <span class="number">90</span>)) &amp;&amp; i &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">-0.4</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(min_index &gt;=<span class="number">0</span> &amp;&amp; min_index &lt;=<span class="number">45</span> &amp;&amp; (last_min &gt; <span class="number">45</span> &amp;&amp; last_min &lt; <span class="number">90</span>) &amp;&amp; i &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">0.4</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(min_index &gt; <span class="number">45</span> &amp;&amp; min_index &lt; <span class="number">90</span> &amp;&amp; (last_min &gt;= <span class="number">0</span> &amp;&amp; last_min &lt;= <span class="number">45</span>) &amp;&amp; i &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">-0.4</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">-0.4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                last_min = min_index;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>((car_direction - move_direction &lt;= <span class="number">150</span> &amp;&amp; car_direction - move_direction &gt; <span class="number">1</span>) || (car_direction - move_direction +<span class="number">360</span> &lt;= <span class="number">150</span> &amp;&amp; car_direction - move_direction +<span class="number">360</span> &gt; <span class="number">1</span>))&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0.2</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">0.2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>((car_direction - move_direction &lt; <span class="number">-1</span> &amp;&amp; car_direction - move_direction &gt;= <span class="number">-150</span>) || (car_direction - move_direction <span class="number">-360</span> &lt;= <span class="number">-1</span> &amp;&amp; car_direction - move_direction <span class="number">-360</span> &gt;= <span class="number">-150</span>))&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0.2</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">-0.2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(car_direction - move_direction == <span class="number">0</span>)&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0.3</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    msg.linear.x = <span class="number">0</span>;</span><br><span class="line">                    msg.angular.z = <span class="number">-0.4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;msg  %d  %f  %f  %f\n&quot;</span>,move_direction,car_direction,msg.linear.x,msg.angular.z);</span><br><span class="line">            cmd_pub.publish(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ros::init(argc, argv, <span class="string">&quot;multi_sub&quot;</span>);</span><br><span class="line"></span><br><span class="line">    multiThreadListener listener_obj;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::AsyncSpinner <span class="title">spinner</span><span class="params">(<span class="number">4</span>)</span></span>; <span class="comment">// Use 2 threads</span></span><br><span class="line">    spinner.start();</span><br><span class="line">    listener_obj.move();</span><br><span class="line">    ros::waitForShutdown();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>前端控制</strong>（学长学姐已实现，我们正在调试）</p>
<p>核心就是前端点击前进后退等，小车接收到数据实现运动。</p>
<p>附核心代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/******************************************************************</span></span><br><span class="line"><span class="comment">基于串口通信的ROS小车基础控制器，功能如下：</span></span><br><span class="line"><span class="comment">1.实现ros控制数据通过固定的格式和串口通信，从而达到控制小车的移动</span></span><br><span class="line"><span class="comment">2.订阅了/cmd_vel主题，只要向该主题发布消息，就能实现对控制小车的移动</span></span><br><span class="line"><span class="comment">3.发布里程计主题/odm</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">串口通信说明：</span></span><br><span class="line"><span class="comment">1.写入串口</span></span><br><span class="line"><span class="comment">（1）内容：左右轮速度，单位为mm/s</span></span><br><span class="line"><span class="comment">（2）格式：１０字节,[右轮速度４字节][左轮速度４字节][结束符&quot;\r\n&quot;２字节]</span></span><br><span class="line"><span class="comment">2.读取串口</span></span><br><span class="line"><span class="comment">（1）内容：小车x,y坐标，方向角，线速度，角速度，单位依次为：mm,mm,rad,mm/s,rad/s</span></span><br><span class="line"><span class="comment">（2）格式：２１字节，[Ｘ坐标４字节][Ｙ坐标４字节][方向角４字节][线速度４字节][角速度４字节][结束符&quot;\n&quot;１字节]</span></span><br><span class="line"><span class="comment">*******************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;geometry_msgs/Twist.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span>                            <span class="comment">//包含geometry_msgs::Twist消息头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Joy_controller</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> Joy_controller()&#123; </span><br><span class="line">    cmd_pub = n.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;joy_vel&quot;</span>,<span class="number">50</span>);</span><br><span class="line">    joy_sub = n.subscribe(<span class="string">&quot;recv_joy&quot;</span>, <span class="number">10</span>, &amp;Joy_controller::chatterCallback,<span class="keyword">this</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; recv_msg)</span></span>&#123;</span><br><span class="line">    geometry_msgs::Twist send_msg;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(recv_msg-&gt;data==<span class="string">&quot;w&quot;</span>)&#123;</span><br><span class="line">        send_msg.linear.x = <span class="number">0.3</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(recv_msg-&gt;data==<span class="string">&quot;s&quot;</span>)&#123;</span><br><span class="line">        send_msg.linear.x = <span class="number">-0.3</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(recv_msg-&gt;data==<span class="string">&quot;a&quot;</span>)&#123;</span><br><span class="line">        send_msg.angular.z = <span class="number">0.3</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(recv_msg-&gt;data==<span class="string">&quot;d&quot;</span>)&#123;</span><br><span class="line">        send_msg.angular.z = <span class="number">-0.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(send_msg.linear.x!=<span class="number">0</span>|| send_msg.angular.z!=<span class="number">0</span>)&#123;</span><br><span class="line">        cmd_pub.publish(send_msg);</span><br><span class="line">        ROS_INFO(<span class="string">&quot;msg.linear.x:%f ,  msg.angular.z: %f&quot;</span>,send_msg.linear.x,send_msg.angular.z);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Publisher cmd_pub;</span><br><span class="line">    ros::Subscriber joy_sub;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    ros::init(argc, argv, <span class="string">&quot;joy_move&quot;</span>);<span class="comment">//turtle1/</span></span><br><span class="line"></span><br><span class="line">    Joy_controller Joy_controller;</span><br><span class="line">    </span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>路径规划</strong>（还未实现，全部完成之后加入计划。）</p>
<p>源码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">route</span>:</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">		self.sub = rospy.Subscriber(<span class="string">&quot;recv_gps&quot;</span>, String, self.get_urt)</span><br><span class="line">		self.pub = rospy.Publisher(<span class="string">&#x27;send_route&#x27;</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_urt</span>(<span class="params">self, data</span>):</span></span><br><span class="line">		</span><br><span class="line">		gps_data = data.data.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">		<span class="comment">#print(gps_data)</span></span><br><span class="line">	<span class="comment">#def get_urt(self,gps_first,gps_destination):</span></span><br><span class="line">		<span class="comment"># 以get请求为例http://api.map.baidu.com/geocoder/v2/?address=百度大厦&amp;output=json&amp;ak=你的ak</span></span><br><span class="line">		<span class="comment">#queryStr = &#x27;/geocoding/v3/?address=%s&amp;output=json&amp;ak=F6hU3hYMC7G0nIqi8DinyVeaCveTNUOD&#x27; % address</span></span><br><span class="line">		queryStr = <span class="string">&#x27;/direction/v2/riding?origin=&#x27;</span>+gps_data[<span class="number">0</span>]+<span class="string">&#x27;,&#x27;</span>+gps_data[<span class="number">1</span>]+<span class="string">&#x27;&amp;destination=&#x27;</span>+gps_data[<span class="number">3</span>]+<span class="string">&#x27;,&#x27;</span>+gps_data[<span class="number">2</span>]+<span class="string">&#x27;&amp;ak=F6hU3hYMC7G0nIqi8DinyVeaCveTNUOD&#x27;</span></span><br><span class="line">		<span class="comment">#queryStr = &#x27;/direction/v2/riding?origin=&#x27;+gps_data[0]+&#x27;,&#x27;+gps_data[1]+&#x27;&amp;destination=30.317174,120.349711&amp;ak=F6hU3hYMC7G0nIqi8DinyVeaCveTNUOD&#x27;</span></span><br><span class="line">					</span><br><span class="line">		<span class="comment"># 对queryStr进行转码，safe内的保留字符不转换</span></span><br><span class="line">		encodedStr = urllib.quote(queryStr, safe=<span class="string">&quot;/:=&amp;?#+!$,;&#x27;@()*[]&quot;</span>)</span><br><span class="line">		<span class="comment"># 在最后直接追加上yoursk</span></span><br><span class="line">		rawStr = encodedStr + <span class="string">&#x27;fqB3atRGbBU4GXysiBMPRPZXq7fzDgWf&#x27;</span></span><br><span class="line">		<span class="comment"># 计算sn</span></span><br><span class="line">		sn = (hashlib.md5(urllib.quote_plus(rawStr).encode(<span class="string">&quot;utf8&quot;</span>)).hexdigest())</span><br><span class="line">		<span class="comment"># 由于URL里面含有中文，所以需要用parse.quote进行处理，然后返回最终可调用的url</span></span><br><span class="line">		url = urllib.quote(<span class="string">&quot;http://api.map.baidu.com&quot;</span> + queryStr + <span class="string">&quot;&amp;sn=&quot;</span> + sn, safe=<span class="string">&quot;/:=&amp;?#+!$,;&#x27;@()*[]&quot;</span>)</span><br><span class="line">		baidu_data = urllib.urlopen(url);</span><br><span class="line">		hjson = json.loads(baidu_data.read());</span><br><span class="line">		<span class="keyword">if</span> hjson[<span class="string">&#x27;status&#x27;</span>] == <span class="number">0</span>:</span><br><span class="line">			result = hjson[<span class="string">&#x27;result&#x27;</span>];</span><br><span class="line">			routes = result[<span class="string">&#x27;routes&#x27;</span>];</span><br><span class="line">			steps = routes[<span class="number">0</span>][<span class="string">&#x27;steps&#x27;</span>]</span><br><span class="line">			path1 = steps[<span class="number">0</span>][<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">			real_path = []</span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(steps)):</span><br><span class="line">				path1 = steps[i][<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">				path2 = path1.split(<span class="string">&#x27;;&#x27;</span>)</span><br><span class="line">				real_path.append(<span class="built_in">str</span>(path2[<span class="built_in">len</span>(path2)<span class="number">-1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(path2[<span class="built_in">len</span>(path2)<span class="number">-1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]))</span><br><span class="line">				<span class="comment">#real_path.append(path2[len(path2)-1].split(&#x27;,&#x27;))</span></span><br><span class="line">			<span class="keyword">if</span> real_path != <span class="literal">None</span>:</span><br><span class="line">				print(<span class="string">&quot;real_path: &quot;</span>+<span class="built_in">str</span>(real_path))</span><br><span class="line">				self.pub.publish(<span class="string">&quot;,&quot;</span>.join(real_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	rospy.init_node(<span class="string">&#x27;route&#x27;</span>, anonymous=<span class="literal">False</span>)</span><br><span class="line">	</span><br><span class="line">	route = route()</span><br><span class="line">	</span><br><span class="line">	rospy.spin()</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-网络协议部分详解"><a href="#3-网络协议部分详解" class="headerlink" title="3.网络协议部分详解"></a>3.网络协议部分详解</h4><ul>
<li><p><strong>与服务器建立连接</strong>（TCP协议）</p>
<p>采用TCP协议保证连接的准确性和稳定性。</p>
<p>附客户端源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rospy.init_node(<span class="string">&#x27;listener&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">destination = <span class="literal">None</span></span><br><span class="line">gps_data =<span class="literal">None</span></span><br><span class="line">send_mulgps = rospy.Publisher(<span class="string">&#x27;recv_gps&#x27;</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line">send_joy = rospy.Publisher(<span class="string">&#x27;recv_joy&#x27;</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">global</span> gps_data</span><br><span class="line">    gps_data = data.data</span><br><span class="line">    print(data.data)</span><br><span class="line">    print(<span class="string">&quot;gps_data:&quot;</span>+gps_data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listener</span>():</span></span><br><span class="line"> </span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;GPS&quot;</span>, String, callback)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">global</span> gps_data </span><br><span class="line"></span><br><span class="line">    t = threading.Thread(target=listener)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    fd.connect((<span class="string">&quot;175.24.59.243&quot;</span>, <span class="number">7002</span>))//服务器，端口号</span><br><span class="line">    <span class="comment">#fd.connect((&quot;127.0.0.1&quot;, 7002))</span></span><br><span class="line">    fd.send(<span class="built_in">bytes</span>(<span class="string">&quot;1&quot;</span>+<span class="string">&quot;\n&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>))//发送本机相关标识数据</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        destination = fd.recv(<span class="number">1024</span>)</span><br><span class="line">        print(destination)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(destination)&gt;<span class="number">1</span>:</span><br><span class="line">            print(<span class="built_in">str</span>(gps_data)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(destination))</span><br><span class="line">            send_mulgps.publish(<span class="built_in">str</span>(gps_data)+<span class="string">&quot;,&quot;</span>+<span class="built_in">str</span>(destination))</span><br><span class="line">            destination =<span class="literal">None</span></span><br><span class="line">     </span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(destination)==<span class="number">1</span>:</span><br><span class="line">            send_joy.publish(<span class="built_in">str</span>(destination))</span><br><span class="line">            destination =<span class="literal">None</span></span><br><span class="line">          </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    fd.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>传输数据</strong>（UDP协议）</p>
<p>传输数据需要尽量保证传输速度，采用UDP协议适于发送数据。</p>
<p>附客户端发送数据代码：（发送GPS，温湿度相关数据）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line">ip = <span class="string">&#x27;175.24.59.243&#x27;</span></span><br><span class="line">port = <span class="number">10002</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span>(<span class="params">data</span>):</span></span><br><span class="line">    gps_data = data.data.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    currentTime = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime(time.time()))</span><br><span class="line">    longitude = <span class="built_in">float</span>(gps_data[<span class="number">1</span>])</span><br><span class="line">    latitude = <span class="built_in">float</span>(gps_data[<span class="number">0</span>])</span><br><span class="line">    temperature = <span class="built_in">round</span>(random.uniform(<span class="number">20</span>, <span class="number">40</span>), <span class="number">2</span>)</span><br><span class="line">    wind = <span class="built_in">round</span>(random.uniform(<span class="number">0</span>, <span class="number">15</span>), <span class="number">2</span>)</span><br><span class="line">    humidity = <span class="built_in">round</span>(random.uniform(<span class="number">0</span>, <span class="number">20</span>), <span class="number">2</span>)</span><br><span class="line">    sendData = &#123;</span><br><span class="line">            <span class="string">&quot;time&quot;</span>: currentTime,</span><br><span class="line">            <span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;longitude&#x27;</span>: longitude,</span><br><span class="line">            <span class="string">&#x27;latitude&#x27;</span>: latitude,</span><br><span class="line">            <span class="string">&#x27;temperature&#x27;</span>: temperature,</span><br><span class="line">            <span class="string">&#x27;wind&#x27;</span>: wind,</span><br><span class="line">            <span class="string">&#x27;humidity&#x27;</span>: humidity</span><br><span class="line">    &#125;</span><br><span class="line">    print(sendData)</span><br><span class="line">    location = <span class="built_in">str</span>(sendData)</span><br><span class="line">    s.sendto(location, (ip, port))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listener</span>():</span></span><br><span class="line"> </span><br><span class="line">    rospy.init_node(<span class="string">&#x27;listener&#x27;</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line"> </span><br><span class="line">    rospy.Subscriber(<span class="string">&quot;GPS&quot;</span>, String, callback)//订阅GPS数据，接收到发送回执</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  </span><br><span class="line">    listener()</span><br><span class="line">    </span><br><span class="line">    s.close()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>暂时画下end。等与后端完全对接后，云平台测试再次续写。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>ROS小车</tag>
      </tags>
  </entry>
  <entry>
    <title>HDU操作系统实验二</title>
    <url>/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C.html</url>
    <content><![CDATA[<h2 id="HDU操作系统实验二"><a href="#HDU操作系统实验二" class="headerlink" title="HDU操作系统实验二"></a>HDU操作系统实验二</h2><h3 id="一、实验要求"><a href="#一、实验要求" class="headerlink" title="一、实验要求"></a>一、实验要求</h3><p>1.设计一个模块，要求列出系统中所有内核线程的程序名、PID、进程状态、进程优先级、父进程的PID。</p>
<p>2.设计一个带参数的模块，其参数为某个进程的PID号，模块的功能是列出该进程的家族信息，包括父进程、兄弟进程和子进程的程序名、PID号及进程状态。</p>
<p>3.进一步分析相关内核函数。</p>
<a id="more"></a>

<h3 id="二、实验思路"><a href="#二、实验思路" class="headerlink" title="二、实验思路"></a>二、实验思路</h3><p>1.第一个的整体思路是遍历各线程，通过用户地址标识符将内核线程和用户线程分开，通过pid进程描述符输出即可。</p>
<p>2.第二个实验要求需要在加载模块时提供对应pid传入参数，父进程和子进程直接遍历即可，兄弟进程稍微复杂些，需返回父进程的子进程的链表头字段，然后逐个遍历（排除传入pid的进程）。</p>
<h3 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h3><p>1.实验一要求较为简单，在内核目录下创建module1文件夹，新建module1.c和Makefile</p>
<p>module1.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched/signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;\t\t名称\t进程号\t状态\t优先级\t&quot;</span>);</span><br><span class="line">    for_each_process(p)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;mm == <span class="literal">NULL</span>)&#123; <span class="comment">//内核线程的mm成员为空</span></span><br><span class="line">            printk(KERN_ALERT<span class="string">&quot;%16s\t%d\t%ld\t%d\n&quot;</span>,p-&gt;comm,p-&gt;pid, p-&gt;state,p-&gt;normal_prio);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清理函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数注册</span></span><br><span class="line">module_init(hello_init);  </span><br><span class="line">module_exit(hello_exit);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块许可申明</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);  </span><br></pre></td></tr></table></figure>

<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=module1.o</span></span><br><span class="line">KDIR:=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line">PWD:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean </span><br></pre></td></tr></table></figure>

<p>输入以下命令编译并加载模块，结果如下图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make #编译</span><br><span class="line">sudo insmod module3.ko #加载模块</span><br><span class="line">lsmod #查看已加载的模块</span><br><span class="line">dmesg #输出日志信息</span><br></pre></td></tr></table></figure>

<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/1.png" alt="1"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/2.png" alt="2"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/3.png" alt="3"></p>
<p>2.实验二与实验一类似，同样编写module2.c和Makefile</p>
<p>module2.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">pid_t</span> pid=<span class="number">1</span>;</span><br><span class="line">module_param(pid,<span class="keyword">int</span>,<span class="number">0644</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">p</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">pp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">psibling</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前进程的 PID</span></span><br><span class="line">    p = pid_task(find_vpid(pid), PIDTYPE_PID);</span><br><span class="line">    printk(<span class="string">&quot;me: %d %s\n&quot;</span>, p-&gt;pid, p-&gt;comm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父进程</span></span><br><span class="line">    <span class="keyword">if</span>(p-&gt;parent == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        printk(<span class="string">&quot;No Parent\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        printk(<span class="string">&quot;Parent: %d %s\n&quot;</span>, p-&gt;parent-&gt;pid, p-&gt;parent-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 兄弟进程</span></span><br><span class="line">    list_for_each(pp, &amp;p-&gt;parent-&gt;children)</span><br><span class="line">    &#123;</span><br><span class="line">        psibling = list_entry(pp, struct task_struct, sibling);</span><br><span class="line">        printk(<span class="string">&quot;sibling %d %s \n&quot;</span>, psibling-&gt;pid, psibling-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子进程</span></span><br><span class="line">    list_for_each(pp, &amp;p-&gt;children)</span><br><span class="line">    &#123;</span><br><span class="line">        psibling = list_entry(pp, struct task_struct, sibling);</span><br><span class="line">        <span class="keyword">if</span> (psibling-&gt;pid == pid)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        printk(<span class="string">&quot;children %d %s \n&quot;</span>, psibling-&gt;pid, psibling-&gt;comm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_ALERT<span class="string">&quot;goodbye!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Makefile</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">obj-m:=module2.o</span></span><br><span class="line">KDIR:=/lib/modules/<span class="variable">$(<span class="built_in">shell</span> uname -r)</span>/build</span><br><span class="line">PWD:=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line"></span><br><span class="line"><span class="section">default:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> modules</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	<span class="variable">$(MAKE)</span> -C <span class="variable">$(KDIR)</span> M=<span class="variable">$(PWD)</span> clean </span><br></pre></td></tr></table></figure>

<p>同样地，输入以下命令编译并加载模块，结果如下图所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make #编译</span><br><span class="line">pstree -p #选择进程pid</span><br><span class="line">sudo insmod module2.ko pid&#x3D;1418    #加载模块</span><br><span class="line">lsmod #查看已加载的模块</span><br><span class="line">dmesg #输出日志信息</span><br></pre></td></tr></table></figure>

<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/4.png" alt="4"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/5.png" alt="5"></p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/6.png" alt="6"></p>
<h3 id="四、实验反思与总结"><a href="#四、实验反思与总结" class="headerlink" title="四、实验反思与总结"></a>四、实验反思与总结</h3><h4 id="1-判断内核线程："><a href="#1-判断内核线程：" class="headerlink" title="1.判断内核线程："></a>1.判断内核线程：</h4><p>通过<strong>进程用户地址空间描述符</strong>来判断，内核线程的mm字段为NULL。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>     #进程用户地址空间描述符</span></span><br></pre></td></tr></table></figure>

<h4 id="2-进程状态："><a href="#2-进程状态：" class="headerlink" title="2.进程状态："></a>2.进程状态：</h4><ul>
<li><p>**R(TASK_RUNNING)**，可执行状态。</p>
<p>只有在该状态的进程才可能在CPU上运行，同一时刻可能有多个进程处于可执行状态。</p>
</li>
<li><p>**S(TASK_INTERRUPTIBLE)**，可中断的睡眠状态。</p>
<p>处于这个状态的进程因为等待某事件的发生（比如等待socket连接、等待信号量），而被挂起。当这些事件发生时，对应的等待队列中的一个或多个进程将被唤醒。一般情况下，进程列表中的绝大多数进程都处于TASK_INTERRUPTIBLE状态。</p>
</li>
<li><p>**D(TASK_UNINTERRUPTIBLE)**，不可中断的睡眠状态。</p>
<p>与TASK_INTERRUPTIBLE状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的是进程不响应异步信号，无法用kill命令关闭处于TASK_UNINTERRUPTIBLE状态的进程。</p>
</li>
<li><p>**T(TASK_STOPPED or TASK_TRACED)**，暂停状态或跟踪状态。</p>
<p>向进程发送一个SIGSTOP信号，它就会因响应该信号而进入TASK_STOPPED状态（除非该进程本身处于TASK_UNINTERRUPTIBLE状态而不响应信号）。当进程正在被跟踪时，它处于TASK_TRACED状态。</p>
</li>
<li><p>**Z(TASK_DEAD - EXIT_ZOMBIE)**，退出状态。</p>
<p>进程在退出的过程中，处于TASK_DEAD状态，如果它的父进程没有收到SIGCHLD信号，故未调用wait（如wait4、waitid）处理函数等待子进程结束，又没有显式忽略该信号，它就一直保持EXIT_ZOMBIE状态。只要父进程不退出，这个EXIT_ZOMBIE状态的子进程就一直存在。</p>
</li>
<li><p>**X(TASK_DEAD - EXIT_DEAD)**，退出状态，进程即将被销毁。</p>
<p>EXIT_DEAD状态是非常短暂的，几乎不可能通过ps命令捕捉到。</p>
</li>
</ul>
<h4 id="3-优先级调度"><a href="#3-优先级调度" class="headerlink" title="3.优先级调度"></a>3.优先级调度</h4><p>a）调度算法</p>
<p>​    linux内核目前实现了6中调度策略(即调度算法), 用于对不同类型的进程进行调度, 或者支持某些特殊的功能，其中SCHED_NORMAL和SCHED_BATCH调度普通的非实时进程, SCHED_FIFO和SCHED_RR和SCHED_DEADLINE则采用不同的调度策略调度实时进程, SCHED_IDLE则在系统空闲时调用idle进程.</p>
<table>
<thead>
<tr>
<th><strong>字段</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>SCHED_NORMAL</td>
<td>（也叫SCHED_OTHER）用于普通进程，通过CFS调度器实现。SCHED_BATCH用于非交互的处理器消耗型进程。SCHED_IDLE是在系统负载很低时使用</td>
</tr>
<tr>
<td>SCHED_BATCH</td>
<td>SCHED_NORMAL普通进程策略的分化版本。采用分时策略，根据动态优先级(可用nice()API设置），分配CPU运算资源。注意：这类进程比上述两类实时进程优先级低，换言之，在有实时进程存在时，实时进程优先调度。但针对吞吐量优化, 除了不能抢占外与常规任务一样，允许任务运行更长时间，更好地使用高速缓存，适合于成批处理的工作</td>
</tr>
<tr>
<td>SCHED_IDLE</td>
<td>优先级最低，在系统空闲时才跑这类进程(如利用闲散计算机资源跑地外文明搜索，蛋白质结构分析等任务，是此调度策略的适用者）</td>
</tr>
<tr>
<td>SCHED_FIFO</td>
<td>先入先出调度算法（实时调度策略），相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务</td>
</tr>
<tr>
<td>SCHED_RR</td>
<td>轮流调度算法（实时调度策略），后者提供 Roound-Robin 语义，采用时间片，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优先级的任务可以抢占低优先级的任务。不同要求的实时任务可以根据需要用sched_setscheduler() API设置策略</td>
</tr>
<tr>
<td>SCHED_DEADLINE</td>
<td>新支持的实时进程调度策略，针对突发型计算，且对延迟和完成时间高度敏感的任务适用。基于Earliest Deadline First (EDF) 调度算法</td>
</tr>
</tbody></table>
<p>b）优先级定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NICE        19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_NICE        -20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NICE_WIDTH      (MAX_NICE - MIN_NICE + 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_USER_RT_PRIO        100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_RT_PRIO             MAX_USER_RT_PRIO</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PRIO                (MAX_RT_PRIO + NICE_WIDTH)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_PRIO            (MAX_RT_PRIO + NICE_WIDTH / 2)</span></span><br></pre></td></tr></table></figure>

<p>​    程序的优先级范围为[0,139]，有效的<strong>实时优先级（RT priority）</strong>范围为[0,99]，SCHED_NORMAL和SCHED_BATCH这两个非实时任务的优先级为[100,139]。[100,139]这个区间的优先级又称为**静态优先级(static priority)**。之所以称为静态优先级是因为它不会随着时间而改变，内核不会修改它，只能通过系统调用nice去修改。静态优先级用进程描述符中的static_prio表示。优先级的值越低，表示具有更高的优先级，0的优先级最高。</p>
<table>
<thead>
<tr>
<th><strong>优先级范围</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0——99</td>
<td>实时进程（RT priority）优先级范围</td>
</tr>
<tr>
<td>100——139</td>
<td>非实时进程（非实时调度器SCHED_NORMAL和SCHED_BATCH）优先级范围</td>
</tr>
</tbody></table>
<p>​    MAX_USER_RT_PRIO的值（默认为100）让用户态的优先级范围区别于实时优先级的最大值（99）。这样设计的好处是<strong>任何内核态线程的优先级都大于用户态的任务线程</strong>。注意：最大实时优先级（MAX_RT_PRIO）不得小于用户态优先级（MAX_USER_RT_PRIO）。</p>
<p>​    用户的nice值[-20,19]对应于静态优先级的[100,139]，也就是说，nice值越小，优先级越低。用户的nice值与优先级的转化关系为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define NICE_TO_PRIO(nice)      ((nice) + DEFAULT_PRIO)</span><br><span class="line">#define PRIO_TO_NICE(prio)      ((prio) - DEFAULT_PRIO)</span><br></pre></td></tr></table></figure>

<p>可用下图来总结所对应的关系：</p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/7.png" alt="7"></p>
<h4 id="4-进程的task-struct结构及家族关系"><a href="#4-进程的task-struct结构及家族关系" class="headerlink" title="4.进程的task_struct结构及家族关系"></a>4.进程的task_struct结构及家族关系</h4><p>a）管理进程最重要的数据结构即为<strong>进程控制块（PCB）</strong>，为task_struct类型的结构体，主要的相关标识符字段有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pid_t pid #进程标识符PID</span><br><span class="line">pid_t tgid #线程组领头线程PID</span><br></pre></td></tr></table></figure>

<p>b）家族关系</p>
<p>除0号进程外，<strong>所有</strong>进程都是PID为1的init进程的后代。task_struct结构中描述家族关系主要字段有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">real_parent</span> #指向创建该进程的父进程</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">parent</span> #指向该进程的当前父进程（一般与上面相同）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>  #指向该进程子进程链表头部</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">sibling</span>   #指向兄弟进程链表中的下一个或前一个节点</span></span><br></pre></td></tr></table></figure>

<p>由sibling字段链接成为父进程的children链表。</p>
<p><img src="/2020-11-24-HDU%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E4%BA%8C/8.jpg" alt="8"></p>
<h4 id="5-链表遍历进程原理"><a href="#5-链表遍历进程原理" class="headerlink" title="5.链表遍历进程原理"></a>5.链表遍历进程原理</h4><p>1.list_for_each()和list_entry()</p>
<p>宏定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> list_for_each(pos, head) \</span></span><br><span class="line">	<span class="keyword">for</span> (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</span><br></pre></td></tr></table></figure>

<p>此定义只找到了list_head域的位置pos，通过list_entry()获得结构体起点地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define list_entry(ptr, type, member) \</span><br><span class="line">	container_of(ptr, type, member)</span><br></pre></td></tr></table></figure>

<p>其中ptr的值减去type结构体中member的偏移量，即可得出首地址。</p>
<p>2.for_each_process(p)和list_for_each_entry()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define list_for_each_entry(pos, head, member)				\</span><br><span class="line">	for (pos &#x3D; list_first_entry(head, typeof(*pos), member);	\</span><br><span class="line">	     &amp;pos-&gt;member !&#x3D; (head);					\</span><br><span class="line">	     pos &#x3D; list_next_entry(pos, member))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define for_each_process(p)</span><br><span class="line">	for(p&#x3D;&amp;init_task; p&#x3D;next_task(p)!&#x3D;&amp;init_task)</span><br></pre></td></tr></table></figure>

<p>可见，均为循环遍历链表算法。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>超星跨文化交际题库查漏补缺</title>
    <url>/2020-11-18-%E8%B7%A8%E6%96%87%E5%8C%96%E4%BA%A4%E9%99%85.html</url>
    <content><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p> 语境这一概念最早由波兰人类学家B.Malinowski在1923年提出来的。他将语境分为 情景 文化</p>
<p> 语言交际分为口语交际和书面语交际。</p>
<p> 下列属于高语境语言交际特点的是表情、空间、沉默</p>
<p> “西方乒乓球式”双向交际的表现是互动频繁 当面争执</p>
<a id="more"></a>

<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p> 在交际过程中不使用口头或文字形式进行信息传递的沟通方式即为非语言交际。 </p>
<p> 语言交际在人们面对面交际过程中仅占35%左右,其余65%主要是靠非语言交际手段来完成的。 </p>
<p> 在握手时，应由 女子; 主人; 年长者; 身份职位高者 先伸手。</p>
<p> 文字 不属于非语言交际中的文化符号</p>
<p> 韩国的公务聚会中应该首先给 职务最高者 敬酒</p>
<p> 美国人的合适的社交距离 4-12英尺</p>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p> 在美国，百合象征着die</p>
<p> 在美国猫头鹰代表着吉祥 <strong>X</strong></p>
<p> 表示“强壮”意思的英文表达是 as strong as a tiger</p>
<p> 英文Don’t lie there. 双关</p>
<p> 从传统上讲中国的春节是正月初一开始，一直延续到正月十五。 <strong>X</strong></p>
<p> 圣诞季节一般是从感恩节过后的“黑色星期五”开始，一直延续的第二年的元月15日  <strong>X</strong></p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>西方人在旅游的时候，喜欢用相机去看，去记录。 <strong>X</strong></p>
<p>习语的三个特征是语言整体性、结构凝固性和不可替代性。 </p>
<p>慷慨准则是指 多称赞别人</p>
<p>在美国考驾照，倒车的时候要注意看倒视镜。 <strong>X</strong></p>
<p>在英语里，“熊”意为聪明、伶俐。 </p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>鸠摩罗什把佛教从西方引入中国，将大量经书翻译成汉语，为佛教在中国的传播做出了巨大的贡献。他与（    ）和玄奘并称为中国佛教四大译经家。<br> A. 不空  B. 鉴真  C. 法显<br> D. 真谛  AD</p>
<p>下面哪些属于中国八大建筑流派？  ABDE<br> A. 江南民居  B. 川西民居  C. 蒙古包  D. 北京四合院 E. 书院建筑</p>
<p>中国古典建筑风格可以用以下哪12个字概括？  BCD<br> A. 金碧辉煌  B. 雕梁画柱<br> C. 飞檐斗拱  D. 亭台楼阁 </p>
<p>下面哪些建筑属于罗马式建筑？<br> A. 德国科隆大教堂<br> B. 伦敦圣保罗大教堂<br> C. 梵蒂冈圣保罗大教堂<br> D. 意大利米兰大教堂<br> E. 巴黎圣母院大教堂<br> 正确答案B,C </p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>HDU</tag>
        <tag>网课</tag>
      </tags>
  </entry>
</search>
